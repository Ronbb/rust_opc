// Bindings generated by `windows-bindgen` 0.62.1

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]

windows_core::imp::define_interface!(
    CATID_OPCHDAServer10,
    CATID_OPCHDAServer10_Vtbl,
    0x7de5b060_e089_11d2_a5e6_000086339399
);
windows_core::imp::interface_hierarchy!(CATID_OPCHDAServer10, windows_core::IUnknown);
#[repr(C)]
#[doc(hidden)]
pub struct CATID_OPCHDAServer10_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
}
pub trait CATID_OPCHDAServer10_Impl: windows_core::IUnknownImpl {}
impl CATID_OPCHDAServer10_Vtbl {
    pub const fn new<Identity: CATID_OPCHDAServer10_Impl, const OFFSET: isize>() -> Self {
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<CATID_OPCHDAServer10 as windows_core::Interface>::IID
    }
}
impl windows_core::RuntimeName for CATID_OPCHDAServer10 {}
windows_core::imp::define_interface!(
    IOPCHDA_AsyncAnnotations,
    IOPCHDA_AsyncAnnotations_Vtbl,
    0x1f1217b7_dee0_11d2_a5e5_000086339399
);
windows_core::imp::interface_hierarchy!(IOPCHDA_AsyncAnnotations, windows_core::IUnknown);
impl IOPCHDA_AsyncAnnotations {
    pub unsafe fn QueryCapabilities(
        &self,
    ) -> windows_core::Result<tagOPCHDA_ANNOTATIONCAPABILITIES> {
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).QueryCapabilities)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub unsafe fn Read(
        &self,
        dwtransactionid: u32,
        htstarttime: *mut tagOPCHDA_TIME,
        htendtime: *mut tagOPCHDA_TIME,
        dwnumitems: u32,
        phserver: *const u32,
        pdwcancelid: *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).Read)(
                windows_core::Interface::as_raw(self),
                dwtransactionid,
                htstarttime as _,
                htendtime as _,
                dwnumitems,
                phserver,
                pdwcancelid as _,
                pperrors as _,
            )
            .ok()
        }
    }
    pub unsafe fn Insert(
        &self,
        dwtransactionid: u32,
        dwnumitems: u32,
        phserver: *const u32,
        fttimestamps: *const windows::Win32::Foundation::FILETIME,
        pannotationvalues: *const tagOPCHDA_ANNOTATION,
        pdwcancelid: *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).Insert)(
                windows_core::Interface::as_raw(self),
                dwtransactionid,
                dwnumitems,
                phserver,
                fttimestamps,
                pannotationvalues,
                pdwcancelid as _,
                pperrors as _,
            )
            .ok()
        }
    }
    pub unsafe fn Cancel(&self, dwcancelid: u32) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).Cancel)(
                windows_core::Interface::as_raw(self),
                dwcancelid,
            )
            .ok()
        }
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOPCHDA_AsyncAnnotations_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub QueryCapabilities: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut tagOPCHDA_ANNOTATIONCAPABILITIES,
    ) -> windows_core::HRESULT,
    pub Read: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut tagOPCHDA_TIME,
        *mut tagOPCHDA_TIME,
        u32,
        *const u32,
        *mut u32,
        *mut *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub Insert: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        u32,
        *const u32,
        *const windows::Win32::Foundation::FILETIME,
        *const tagOPCHDA_ANNOTATION,
        *mut u32,
        *mut *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub Cancel: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
}
pub trait IOPCHDA_AsyncAnnotations_Impl: windows_core::IUnknownImpl {
    fn QueryCapabilities(&self) -> windows_core::Result<tagOPCHDA_ANNOTATIONCAPABILITIES>;
    fn Read(
        &self,
        dwtransactionid: u32,
        htstarttime: *mut tagOPCHDA_TIME,
        htendtime: *mut tagOPCHDA_TIME,
        dwnumitems: u32,
        phserver: *const u32,
        pdwcancelid: *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn Insert(
        &self,
        dwtransactionid: u32,
        dwnumitems: u32,
        phserver: *const u32,
        fttimestamps: *const windows::Win32::Foundation::FILETIME,
        pannotationvalues: *const tagOPCHDA_ANNOTATION,
        pdwcancelid: *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn Cancel(&self, dwcancelid: u32) -> windows_core::Result<()>;
}
impl IOPCHDA_AsyncAnnotations_Vtbl {
    pub const fn new<Identity: IOPCHDA_AsyncAnnotations_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn QueryCapabilities<
            Identity: IOPCHDA_AsyncAnnotations_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            pcapabilities: *mut tagOPCHDA_ANNOTATIONCAPABILITIES,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IOPCHDA_AsyncAnnotations_Impl::QueryCapabilities(this) {
                    Ok(ok__) => {
                        pcapabilities.write(core::mem::transmute(ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Read<
            Identity: IOPCHDA_AsyncAnnotations_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwtransactionid: u32,
            htstarttime: *mut tagOPCHDA_TIME,
            htendtime: *mut tagOPCHDA_TIME,
            dwnumitems: u32,
            phserver: *const u32,
            pdwcancelid: *mut u32,
            pperrors: *mut *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_AsyncAnnotations_Impl::Read(
                    this,
                    core::mem::transmute_copy(&dwtransactionid),
                    core::mem::transmute_copy(&htstarttime),
                    core::mem::transmute_copy(&htendtime),
                    core::mem::transmute_copy(&dwnumitems),
                    core::mem::transmute_copy(&phserver),
                    core::mem::transmute_copy(&pdwcancelid),
                    core::mem::transmute_copy(&pperrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn Insert<
            Identity: IOPCHDA_AsyncAnnotations_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwtransactionid: u32,
            dwnumitems: u32,
            phserver: *const u32,
            fttimestamps: *const windows::Win32::Foundation::FILETIME,
            pannotationvalues: *const tagOPCHDA_ANNOTATION,
            pdwcancelid: *mut u32,
            pperrors: *mut *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_AsyncAnnotations_Impl::Insert(
                    this,
                    core::mem::transmute_copy(&dwtransactionid),
                    core::mem::transmute_copy(&dwnumitems),
                    core::mem::transmute_copy(&phserver),
                    core::mem::transmute_copy(&fttimestamps),
                    core::mem::transmute_copy(&pannotationvalues),
                    core::mem::transmute_copy(&pdwcancelid),
                    core::mem::transmute_copy(&pperrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn Cancel<
            Identity: IOPCHDA_AsyncAnnotations_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwcancelid: u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_AsyncAnnotations_Impl::Cancel(this, core::mem::transmute_copy(&dwcancelid))
                    .into()
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            QueryCapabilities: QueryCapabilities::<Identity, OFFSET>,
            Read: Read::<Identity, OFFSET>,
            Insert: Insert::<Identity, OFFSET>,
            Cancel: Cancel::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IOPCHDA_AsyncAnnotations as windows_core::Interface>::IID
    }
}
impl windows_core::RuntimeName for IOPCHDA_AsyncAnnotations {}
windows_core::imp::define_interface!(
    IOPCHDA_AsyncRead,
    IOPCHDA_AsyncRead_Vtbl,
    0x1f1217b5_dee0_11d2_a5e5_000086339399
);
windows_core::imp::interface_hierarchy!(IOPCHDA_AsyncRead, windows_core::IUnknown);
impl IOPCHDA_AsyncRead {
    pub unsafe fn ReadRaw(
        &self,
        dwtransactionid: u32,
        htstarttime: *mut tagOPCHDA_TIME,
        htendtime: *mut tagOPCHDA_TIME,
        dwnumvalues: u32,
        bbounds: bool,
        dwnumitems: u32,
        phserver: *const u32,
        pdwcancelid: *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).ReadRaw)(
                windows_core::Interface::as_raw(self),
                dwtransactionid,
                htstarttime as _,
                htendtime as _,
                dwnumvalues,
                bbounds.into(),
                dwnumitems,
                phserver,
                pdwcancelid as _,
                pperrors as _,
            )
            .ok()
        }
    }
    pub unsafe fn AdviseRaw(
        &self,
        dwtransactionid: u32,
        htstarttime: *mut tagOPCHDA_TIME,
        ftupdateinterval: windows::Win32::Foundation::FILETIME,
        dwnumitems: u32,
        phserver: *const u32,
        pdwcancelid: *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).AdviseRaw)(
                windows_core::Interface::as_raw(self),
                dwtransactionid,
                htstarttime as _,
                core::mem::transmute(ftupdateinterval),
                dwnumitems,
                phserver,
                pdwcancelid as _,
                pperrors as _,
            )
            .ok()
        }
    }
    pub unsafe fn ReadProcessed(
        &self,
        dwtransactionid: u32,
        htstarttime: *mut tagOPCHDA_TIME,
        htendtime: *mut tagOPCHDA_TIME,
        ftresampleinterval: windows::Win32::Foundation::FILETIME,
        dwnumitems: u32,
        phserver: *const u32,
        haaggregate: *const u32,
        pdwcancelid: *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).ReadProcessed)(
                windows_core::Interface::as_raw(self),
                dwtransactionid,
                htstarttime as _,
                htendtime as _,
                core::mem::transmute(ftresampleinterval),
                dwnumitems,
                phserver,
                haaggregate,
                pdwcancelid as _,
                pperrors as _,
            )
            .ok()
        }
    }
    pub unsafe fn AdviseProcessed(
        &self,
        dwtransactionid: u32,
        htstarttime: *mut tagOPCHDA_TIME,
        ftresampleinterval: windows::Win32::Foundation::FILETIME,
        dwnumitems: u32,
        phserver: *const u32,
        haaggregate: *const u32,
        dwnumintervals: u32,
        pdwcancelid: *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).AdviseProcessed)(
                windows_core::Interface::as_raw(self),
                dwtransactionid,
                htstarttime as _,
                core::mem::transmute(ftresampleinterval),
                dwnumitems,
                phserver,
                haaggregate,
                dwnumintervals,
                pdwcancelid as _,
                pperrors as _,
            )
            .ok()
        }
    }
    pub unsafe fn ReadAtTime(
        &self,
        dwtransactionid: u32,
        fttimestamps: &[windows::Win32::Foundation::FILETIME],
        dwnumitems: u32,
        phserver: *const u32,
        pdwcancelid: *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).ReadAtTime)(
                windows_core::Interface::as_raw(self),
                dwtransactionid,
                fttimestamps.len().try_into().unwrap(),
                core::mem::transmute(fttimestamps.as_ptr()),
                dwnumitems,
                phserver,
                pdwcancelid as _,
                pperrors as _,
            )
            .ok()
        }
    }
    pub unsafe fn ReadModified(
        &self,
        dwtransactionid: u32,
        htstarttime: *mut tagOPCHDA_TIME,
        htendtime: *mut tagOPCHDA_TIME,
        dwnumvalues: u32,
        dwnumitems: u32,
        phserver: *const u32,
        pdwcancelid: *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).ReadModified)(
                windows_core::Interface::as_raw(self),
                dwtransactionid,
                htstarttime as _,
                htendtime as _,
                dwnumvalues,
                dwnumitems,
                phserver,
                pdwcancelid as _,
                pperrors as _,
            )
            .ok()
        }
    }
    pub unsafe fn ReadAttribute(
        &self,
        dwtransactionid: u32,
        htstarttime: *mut tagOPCHDA_TIME,
        htendtime: *mut tagOPCHDA_TIME,
        hserver: u32,
        dwnumattributes: u32,
        dwattributeids: *const u32,
        pdwcancelid: *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).ReadAttribute)(
                windows_core::Interface::as_raw(self),
                dwtransactionid,
                htstarttime as _,
                htendtime as _,
                hserver,
                dwnumattributes,
                dwattributeids,
                pdwcancelid as _,
                pperrors as _,
            )
            .ok()
        }
    }
    pub unsafe fn Cancel(&self, dwcancelid: u32) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).Cancel)(
                windows_core::Interface::as_raw(self),
                dwcancelid,
            )
            .ok()
        }
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOPCHDA_AsyncRead_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub ReadRaw: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut tagOPCHDA_TIME,
        *mut tagOPCHDA_TIME,
        u32,
        windows_core::BOOL,
        u32,
        *const u32,
        *mut u32,
        *mut *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub AdviseRaw: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut tagOPCHDA_TIME,
        windows::Win32::Foundation::FILETIME,
        u32,
        *const u32,
        *mut u32,
        *mut *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub ReadProcessed: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut tagOPCHDA_TIME,
        *mut tagOPCHDA_TIME,
        windows::Win32::Foundation::FILETIME,
        u32,
        *const u32,
        *const u32,
        *mut u32,
        *mut *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub AdviseProcessed: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut tagOPCHDA_TIME,
        windows::Win32::Foundation::FILETIME,
        u32,
        *const u32,
        *const u32,
        u32,
        *mut u32,
        *mut *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub ReadAtTime: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        u32,
        *const windows::Win32::Foundation::FILETIME,
        u32,
        *const u32,
        *mut u32,
        *mut *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub ReadModified: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut tagOPCHDA_TIME,
        *mut tagOPCHDA_TIME,
        u32,
        u32,
        *const u32,
        *mut u32,
        *mut *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub ReadAttribute: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut tagOPCHDA_TIME,
        *mut tagOPCHDA_TIME,
        u32,
        u32,
        *const u32,
        *mut u32,
        *mut *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub Cancel: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
}
pub trait IOPCHDA_AsyncRead_Impl: windows_core::IUnknownImpl {
    fn ReadRaw(
        &self,
        dwtransactionid: u32,
        htstarttime: *mut tagOPCHDA_TIME,
        htendtime: *mut tagOPCHDA_TIME,
        dwnumvalues: u32,
        bbounds: windows_core::BOOL,
        dwnumitems: u32,
        phserver: *const u32,
        pdwcancelid: *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn AdviseRaw(
        &self,
        dwtransactionid: u32,
        htstarttime: *mut tagOPCHDA_TIME,
        ftupdateinterval: &windows::Win32::Foundation::FILETIME,
        dwnumitems: u32,
        phserver: *const u32,
        pdwcancelid: *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn ReadProcessed(
        &self,
        dwtransactionid: u32,
        htstarttime: *mut tagOPCHDA_TIME,
        htendtime: *mut tagOPCHDA_TIME,
        ftresampleinterval: &windows::Win32::Foundation::FILETIME,
        dwnumitems: u32,
        phserver: *const u32,
        haaggregate: *const u32,
        pdwcancelid: *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn AdviseProcessed(
        &self,
        dwtransactionid: u32,
        htstarttime: *mut tagOPCHDA_TIME,
        ftresampleinterval: &windows::Win32::Foundation::FILETIME,
        dwnumitems: u32,
        phserver: *const u32,
        haaggregate: *const u32,
        dwnumintervals: u32,
        pdwcancelid: *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn ReadAtTime(
        &self,
        dwtransactionid: u32,
        dwnumtimestamps: u32,
        fttimestamps: *const windows::Win32::Foundation::FILETIME,
        dwnumitems: u32,
        phserver: *const u32,
        pdwcancelid: *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn ReadModified(
        &self,
        dwtransactionid: u32,
        htstarttime: *mut tagOPCHDA_TIME,
        htendtime: *mut tagOPCHDA_TIME,
        dwnumvalues: u32,
        dwnumitems: u32,
        phserver: *const u32,
        pdwcancelid: *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn ReadAttribute(
        &self,
        dwtransactionid: u32,
        htstarttime: *mut tagOPCHDA_TIME,
        htendtime: *mut tagOPCHDA_TIME,
        hserver: u32,
        dwnumattributes: u32,
        dwattributeids: *const u32,
        pdwcancelid: *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn Cancel(&self, dwcancelid: u32) -> windows_core::Result<()>;
}
impl IOPCHDA_AsyncRead_Vtbl {
    pub const fn new<Identity: IOPCHDA_AsyncRead_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ReadRaw<Identity: IOPCHDA_AsyncRead_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            dwtransactionid: u32,
            htstarttime: *mut tagOPCHDA_TIME,
            htendtime: *mut tagOPCHDA_TIME,
            dwnumvalues: u32,
            bbounds: windows_core::BOOL,
            dwnumitems: u32,
            phserver: *const u32,
            pdwcancelid: *mut u32,
            pperrors: *mut *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_AsyncRead_Impl::ReadRaw(
                    this,
                    core::mem::transmute_copy(&dwtransactionid),
                    core::mem::transmute_copy(&htstarttime),
                    core::mem::transmute_copy(&htendtime),
                    core::mem::transmute_copy(&dwnumvalues),
                    core::mem::transmute_copy(&bbounds),
                    core::mem::transmute_copy(&dwnumitems),
                    core::mem::transmute_copy(&phserver),
                    core::mem::transmute_copy(&pdwcancelid),
                    core::mem::transmute_copy(&pperrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn AdviseRaw<
            Identity: IOPCHDA_AsyncRead_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwtransactionid: u32,
            htstarttime: *mut tagOPCHDA_TIME,
            ftupdateinterval: windows::Win32::Foundation::FILETIME,
            dwnumitems: u32,
            phserver: *const u32,
            pdwcancelid: *mut u32,
            pperrors: *mut *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_AsyncRead_Impl::AdviseRaw(
                    this,
                    core::mem::transmute_copy(&dwtransactionid),
                    core::mem::transmute_copy(&htstarttime),
                    core::mem::transmute(&ftupdateinterval),
                    core::mem::transmute_copy(&dwnumitems),
                    core::mem::transmute_copy(&phserver),
                    core::mem::transmute_copy(&pdwcancelid),
                    core::mem::transmute_copy(&pperrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn ReadProcessed<
            Identity: IOPCHDA_AsyncRead_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwtransactionid: u32,
            htstarttime: *mut tagOPCHDA_TIME,
            htendtime: *mut tagOPCHDA_TIME,
            ftresampleinterval: windows::Win32::Foundation::FILETIME,
            dwnumitems: u32,
            phserver: *const u32,
            haaggregate: *const u32,
            pdwcancelid: *mut u32,
            pperrors: *mut *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_AsyncRead_Impl::ReadProcessed(
                    this,
                    core::mem::transmute_copy(&dwtransactionid),
                    core::mem::transmute_copy(&htstarttime),
                    core::mem::transmute_copy(&htendtime),
                    core::mem::transmute(&ftresampleinterval),
                    core::mem::transmute_copy(&dwnumitems),
                    core::mem::transmute_copy(&phserver),
                    core::mem::transmute_copy(&haaggregate),
                    core::mem::transmute_copy(&pdwcancelid),
                    core::mem::transmute_copy(&pperrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn AdviseProcessed<
            Identity: IOPCHDA_AsyncRead_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwtransactionid: u32,
            htstarttime: *mut tagOPCHDA_TIME,
            ftresampleinterval: windows::Win32::Foundation::FILETIME,
            dwnumitems: u32,
            phserver: *const u32,
            haaggregate: *const u32,
            dwnumintervals: u32,
            pdwcancelid: *mut u32,
            pperrors: *mut *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_AsyncRead_Impl::AdviseProcessed(
                    this,
                    core::mem::transmute_copy(&dwtransactionid),
                    core::mem::transmute_copy(&htstarttime),
                    core::mem::transmute(&ftresampleinterval),
                    core::mem::transmute_copy(&dwnumitems),
                    core::mem::transmute_copy(&phserver),
                    core::mem::transmute_copy(&haaggregate),
                    core::mem::transmute_copy(&dwnumintervals),
                    core::mem::transmute_copy(&pdwcancelid),
                    core::mem::transmute_copy(&pperrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn ReadAtTime<
            Identity: IOPCHDA_AsyncRead_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwtransactionid: u32,
            dwnumtimestamps: u32,
            fttimestamps: *const windows::Win32::Foundation::FILETIME,
            dwnumitems: u32,
            phserver: *const u32,
            pdwcancelid: *mut u32,
            pperrors: *mut *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_AsyncRead_Impl::ReadAtTime(
                    this,
                    core::mem::transmute_copy(&dwtransactionid),
                    core::mem::transmute_copy(&dwnumtimestamps),
                    core::mem::transmute_copy(&fttimestamps),
                    core::mem::transmute_copy(&dwnumitems),
                    core::mem::transmute_copy(&phserver),
                    core::mem::transmute_copy(&pdwcancelid),
                    core::mem::transmute_copy(&pperrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn ReadModified<
            Identity: IOPCHDA_AsyncRead_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwtransactionid: u32,
            htstarttime: *mut tagOPCHDA_TIME,
            htendtime: *mut tagOPCHDA_TIME,
            dwnumvalues: u32,
            dwnumitems: u32,
            phserver: *const u32,
            pdwcancelid: *mut u32,
            pperrors: *mut *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_AsyncRead_Impl::ReadModified(
                    this,
                    core::mem::transmute_copy(&dwtransactionid),
                    core::mem::transmute_copy(&htstarttime),
                    core::mem::transmute_copy(&htendtime),
                    core::mem::transmute_copy(&dwnumvalues),
                    core::mem::transmute_copy(&dwnumitems),
                    core::mem::transmute_copy(&phserver),
                    core::mem::transmute_copy(&pdwcancelid),
                    core::mem::transmute_copy(&pperrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn ReadAttribute<
            Identity: IOPCHDA_AsyncRead_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwtransactionid: u32,
            htstarttime: *mut tagOPCHDA_TIME,
            htendtime: *mut tagOPCHDA_TIME,
            hserver: u32,
            dwnumattributes: u32,
            dwattributeids: *const u32,
            pdwcancelid: *mut u32,
            pperrors: *mut *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_AsyncRead_Impl::ReadAttribute(
                    this,
                    core::mem::transmute_copy(&dwtransactionid),
                    core::mem::transmute_copy(&htstarttime),
                    core::mem::transmute_copy(&htendtime),
                    core::mem::transmute_copy(&hserver),
                    core::mem::transmute_copy(&dwnumattributes),
                    core::mem::transmute_copy(&dwattributeids),
                    core::mem::transmute_copy(&pdwcancelid),
                    core::mem::transmute_copy(&pperrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn Cancel<Identity: IOPCHDA_AsyncRead_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            dwcancelid: u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_AsyncRead_Impl::Cancel(this, core::mem::transmute_copy(&dwcancelid)).into()
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            ReadRaw: ReadRaw::<Identity, OFFSET>,
            AdviseRaw: AdviseRaw::<Identity, OFFSET>,
            ReadProcessed: ReadProcessed::<Identity, OFFSET>,
            AdviseProcessed: AdviseProcessed::<Identity, OFFSET>,
            ReadAtTime: ReadAtTime::<Identity, OFFSET>,
            ReadModified: ReadModified::<Identity, OFFSET>,
            ReadAttribute: ReadAttribute::<Identity, OFFSET>,
            Cancel: Cancel::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IOPCHDA_AsyncRead as windows_core::Interface>::IID
    }
}
impl windows_core::RuntimeName for IOPCHDA_AsyncRead {}
windows_core::imp::define_interface!(
    IOPCHDA_AsyncUpdate,
    IOPCHDA_AsyncUpdate_Vtbl,
    0x1f1217b6_dee0_11d2_a5e5_000086339399
);
windows_core::imp::interface_hierarchy!(IOPCHDA_AsyncUpdate, windows_core::IUnknown);
impl IOPCHDA_AsyncUpdate {
    pub unsafe fn QueryCapabilities(&self) -> windows_core::Result<tagOPCHDA_UPDATECAPABILITIES> {
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).QueryCapabilities)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub unsafe fn Insert(
        &self,
        dwtransactionid: u32,
        dwnumitems: u32,
        phserver: *const u32,
        fttimestamps: *const windows::Win32::Foundation::FILETIME,
        vdatavalues: *const windows::Win32::System::Variant::VARIANT,
        pdwqualities: *const u32,
        pdwcancelid: *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).Insert)(
                windows_core::Interface::as_raw(self),
                dwtransactionid,
                dwnumitems,
                phserver,
                fttimestamps,
                core::mem::transmute(vdatavalues),
                pdwqualities,
                pdwcancelid as _,
                pperrors as _,
            )
            .ok()
        }
    }
    pub unsafe fn Replace(
        &self,
        dwtransactionid: u32,
        dwnumitems: u32,
        phserver: *const u32,
        fttimestamps: *const windows::Win32::Foundation::FILETIME,
        vdatavalues: *const windows::Win32::System::Variant::VARIANT,
        pdwqualities: *const u32,
        pdwcancelid: *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).Replace)(
                windows_core::Interface::as_raw(self),
                dwtransactionid,
                dwnumitems,
                phserver,
                fttimestamps,
                core::mem::transmute(vdatavalues),
                pdwqualities,
                pdwcancelid as _,
                pperrors as _,
            )
            .ok()
        }
    }
    pub unsafe fn InsertReplace(
        &self,
        dwtransactionid: u32,
        dwnumitems: u32,
        phserver: *const u32,
        fttimestamps: *const windows::Win32::Foundation::FILETIME,
        vdatavalues: *const windows::Win32::System::Variant::VARIANT,
        pdwqualities: *const u32,
        pdwcancelid: *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).InsertReplace)(
                windows_core::Interface::as_raw(self),
                dwtransactionid,
                dwnumitems,
                phserver,
                fttimestamps,
                core::mem::transmute(vdatavalues),
                pdwqualities,
                pdwcancelid as _,
                pperrors as _,
            )
            .ok()
        }
    }
    pub unsafe fn DeleteRaw(
        &self,
        dwtransactionid: u32,
        htstarttime: *mut tagOPCHDA_TIME,
        htendtime: *mut tagOPCHDA_TIME,
        dwnumitems: u32,
        phserver: *const u32,
        pdwcancelid: *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).DeleteRaw)(
                windows_core::Interface::as_raw(self),
                dwtransactionid,
                htstarttime as _,
                htendtime as _,
                dwnumitems,
                phserver,
                pdwcancelid as _,
                pperrors as _,
            )
            .ok()
        }
    }
    pub unsafe fn DeleteAtTime(
        &self,
        dwtransactionid: u32,
        dwnumitems: u32,
        phserver: *const u32,
        fttimestamps: *const windows::Win32::Foundation::FILETIME,
        pdwcancelid: *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).DeleteAtTime)(
                windows_core::Interface::as_raw(self),
                dwtransactionid,
                dwnumitems,
                phserver,
                fttimestamps,
                pdwcancelid as _,
                pperrors as _,
            )
            .ok()
        }
    }
    pub unsafe fn Cancel(&self, dwcancelid: u32) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).Cancel)(
                windows_core::Interface::as_raw(self),
                dwcancelid,
            )
            .ok()
        }
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOPCHDA_AsyncUpdate_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub QueryCapabilities: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut tagOPCHDA_UPDATECAPABILITIES,
    ) -> windows_core::HRESULT,
    pub Insert: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        u32,
        *const u32,
        *const windows::Win32::Foundation::FILETIME,
        *const windows::Win32::System::Variant::VARIANT,
        *const u32,
        *mut u32,
        *mut *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub Replace: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        u32,
        *const u32,
        *const windows::Win32::Foundation::FILETIME,
        *const windows::Win32::System::Variant::VARIANT,
        *const u32,
        *mut u32,
        *mut *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub InsertReplace: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        u32,
        *const u32,
        *const windows::Win32::Foundation::FILETIME,
        *const windows::Win32::System::Variant::VARIANT,
        *const u32,
        *mut u32,
        *mut *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub DeleteRaw: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut tagOPCHDA_TIME,
        *mut tagOPCHDA_TIME,
        u32,
        *const u32,
        *mut u32,
        *mut *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub DeleteAtTime: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        u32,
        *const u32,
        *const windows::Win32::Foundation::FILETIME,
        *mut u32,
        *mut *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub Cancel: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
}
pub trait IOPCHDA_AsyncUpdate_Impl: windows_core::IUnknownImpl {
    fn QueryCapabilities(&self) -> windows_core::Result<tagOPCHDA_UPDATECAPABILITIES>;
    fn Insert(
        &self,
        dwtransactionid: u32,
        dwnumitems: u32,
        phserver: *const u32,
        fttimestamps: *const windows::Win32::Foundation::FILETIME,
        vdatavalues: *const windows::Win32::System::Variant::VARIANT,
        pdwqualities: *const u32,
        pdwcancelid: *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn Replace(
        &self,
        dwtransactionid: u32,
        dwnumitems: u32,
        phserver: *const u32,
        fttimestamps: *const windows::Win32::Foundation::FILETIME,
        vdatavalues: *const windows::Win32::System::Variant::VARIANT,
        pdwqualities: *const u32,
        pdwcancelid: *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn InsertReplace(
        &self,
        dwtransactionid: u32,
        dwnumitems: u32,
        phserver: *const u32,
        fttimestamps: *const windows::Win32::Foundation::FILETIME,
        vdatavalues: *const windows::Win32::System::Variant::VARIANT,
        pdwqualities: *const u32,
        pdwcancelid: *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn DeleteRaw(
        &self,
        dwtransactionid: u32,
        htstarttime: *mut tagOPCHDA_TIME,
        htendtime: *mut tagOPCHDA_TIME,
        dwnumitems: u32,
        phserver: *const u32,
        pdwcancelid: *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn DeleteAtTime(
        &self,
        dwtransactionid: u32,
        dwnumitems: u32,
        phserver: *const u32,
        fttimestamps: *const windows::Win32::Foundation::FILETIME,
        pdwcancelid: *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn Cancel(&self, dwcancelid: u32) -> windows_core::Result<()>;
}
impl IOPCHDA_AsyncUpdate_Vtbl {
    pub const fn new<Identity: IOPCHDA_AsyncUpdate_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn QueryCapabilities<
            Identity: IOPCHDA_AsyncUpdate_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            pcapabilities: *mut tagOPCHDA_UPDATECAPABILITIES,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IOPCHDA_AsyncUpdate_Impl::QueryCapabilities(this) {
                    Ok(ok__) => {
                        pcapabilities.write(core::mem::transmute(ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Insert<
            Identity: IOPCHDA_AsyncUpdate_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwtransactionid: u32,
            dwnumitems: u32,
            phserver: *const u32,
            fttimestamps: *const windows::Win32::Foundation::FILETIME,
            vdatavalues: *const windows::Win32::System::Variant::VARIANT,
            pdwqualities: *const u32,
            pdwcancelid: *mut u32,
            pperrors: *mut *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_AsyncUpdate_Impl::Insert(
                    this,
                    core::mem::transmute_copy(&dwtransactionid),
                    core::mem::transmute_copy(&dwnumitems),
                    core::mem::transmute_copy(&phserver),
                    core::mem::transmute_copy(&fttimestamps),
                    core::mem::transmute_copy(&vdatavalues),
                    core::mem::transmute_copy(&pdwqualities),
                    core::mem::transmute_copy(&pdwcancelid),
                    core::mem::transmute_copy(&pperrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn Replace<
            Identity: IOPCHDA_AsyncUpdate_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwtransactionid: u32,
            dwnumitems: u32,
            phserver: *const u32,
            fttimestamps: *const windows::Win32::Foundation::FILETIME,
            vdatavalues: *const windows::Win32::System::Variant::VARIANT,
            pdwqualities: *const u32,
            pdwcancelid: *mut u32,
            pperrors: *mut *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_AsyncUpdate_Impl::Replace(
                    this,
                    core::mem::transmute_copy(&dwtransactionid),
                    core::mem::transmute_copy(&dwnumitems),
                    core::mem::transmute_copy(&phserver),
                    core::mem::transmute_copy(&fttimestamps),
                    core::mem::transmute_copy(&vdatavalues),
                    core::mem::transmute_copy(&pdwqualities),
                    core::mem::transmute_copy(&pdwcancelid),
                    core::mem::transmute_copy(&pperrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn InsertReplace<
            Identity: IOPCHDA_AsyncUpdate_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwtransactionid: u32,
            dwnumitems: u32,
            phserver: *const u32,
            fttimestamps: *const windows::Win32::Foundation::FILETIME,
            vdatavalues: *const windows::Win32::System::Variant::VARIANT,
            pdwqualities: *const u32,
            pdwcancelid: *mut u32,
            pperrors: *mut *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_AsyncUpdate_Impl::InsertReplace(
                    this,
                    core::mem::transmute_copy(&dwtransactionid),
                    core::mem::transmute_copy(&dwnumitems),
                    core::mem::transmute_copy(&phserver),
                    core::mem::transmute_copy(&fttimestamps),
                    core::mem::transmute_copy(&vdatavalues),
                    core::mem::transmute_copy(&pdwqualities),
                    core::mem::transmute_copy(&pdwcancelid),
                    core::mem::transmute_copy(&pperrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn DeleteRaw<
            Identity: IOPCHDA_AsyncUpdate_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwtransactionid: u32,
            htstarttime: *mut tagOPCHDA_TIME,
            htendtime: *mut tagOPCHDA_TIME,
            dwnumitems: u32,
            phserver: *const u32,
            pdwcancelid: *mut u32,
            pperrors: *mut *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_AsyncUpdate_Impl::DeleteRaw(
                    this,
                    core::mem::transmute_copy(&dwtransactionid),
                    core::mem::transmute_copy(&htstarttime),
                    core::mem::transmute_copy(&htendtime),
                    core::mem::transmute_copy(&dwnumitems),
                    core::mem::transmute_copy(&phserver),
                    core::mem::transmute_copy(&pdwcancelid),
                    core::mem::transmute_copy(&pperrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn DeleteAtTime<
            Identity: IOPCHDA_AsyncUpdate_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwtransactionid: u32,
            dwnumitems: u32,
            phserver: *const u32,
            fttimestamps: *const windows::Win32::Foundation::FILETIME,
            pdwcancelid: *mut u32,
            pperrors: *mut *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_AsyncUpdate_Impl::DeleteAtTime(
                    this,
                    core::mem::transmute_copy(&dwtransactionid),
                    core::mem::transmute_copy(&dwnumitems),
                    core::mem::transmute_copy(&phserver),
                    core::mem::transmute_copy(&fttimestamps),
                    core::mem::transmute_copy(&pdwcancelid),
                    core::mem::transmute_copy(&pperrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn Cancel<
            Identity: IOPCHDA_AsyncUpdate_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwcancelid: u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_AsyncUpdate_Impl::Cancel(this, core::mem::transmute_copy(&dwcancelid))
                    .into()
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            QueryCapabilities: QueryCapabilities::<Identity, OFFSET>,
            Insert: Insert::<Identity, OFFSET>,
            Replace: Replace::<Identity, OFFSET>,
            InsertReplace: InsertReplace::<Identity, OFFSET>,
            DeleteRaw: DeleteRaw::<Identity, OFFSET>,
            DeleteAtTime: DeleteAtTime::<Identity, OFFSET>,
            Cancel: Cancel::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IOPCHDA_AsyncUpdate as windows_core::Interface>::IID
    }
}
impl windows_core::RuntimeName for IOPCHDA_AsyncUpdate {}
windows_core::imp::define_interface!(
    IOPCHDA_Browser,
    IOPCHDA_Browser_Vtbl,
    0x1f1217b1_dee0_11d2_a5e5_000086339399
);
windows_core::imp::interface_hierarchy!(IOPCHDA_Browser, windows_core::IUnknown);
impl IOPCHDA_Browser {
    pub unsafe fn GetEnum(
        &self,
        dwbrowsetype: tagOPCHDA_BROWSETYPE,
    ) -> windows_core::Result<windows::Win32::System::Com::IEnumString> {
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).GetEnum)(
                windows_core::Interface::as_raw(self),
                dwbrowsetype,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        }
    }
    pub unsafe fn ChangeBrowsePosition<P1>(
        &self,
        dwbrowsedirection: tagOPCHDA_BROWSEDIRECTION,
        szstring: P1,
    ) -> windows_core::Result<()>
    where
        P1: windows_core::Param<windows_core::PCWSTR>,
    {
        unsafe {
            (windows_core::Interface::vtable(self).ChangeBrowsePosition)(
                windows_core::Interface::as_raw(self),
                dwbrowsedirection,
                szstring.param().abi(),
            )
            .ok()
        }
    }
    pub unsafe fn GetItemID<P0>(&self, sznode: P0) -> windows_core::Result<windows_core::PWSTR>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
    {
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).GetItemID)(
                windows_core::Interface::as_raw(self),
                sznode.param().abi(),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub unsafe fn GetBranchPosition(&self) -> windows_core::Result<windows_core::PWSTR> {
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).GetBranchPosition)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOPCHDA_Browser_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub GetEnum: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        tagOPCHDA_BROWSETYPE,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ChangeBrowsePosition: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        tagOPCHDA_BROWSEDIRECTION,
        windows_core::PCWSTR,
    ) -> windows_core::HRESULT,
    pub GetItemID: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        *mut windows_core::PWSTR,
    ) -> windows_core::HRESULT,
    pub GetBranchPosition: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_core::PWSTR,
    ) -> windows_core::HRESULT,
}
pub trait IOPCHDA_Browser_Impl: windows_core::IUnknownImpl {
    fn GetEnum(
        &self,
        dwbrowsetype: tagOPCHDA_BROWSETYPE,
    ) -> windows_core::Result<windows::Win32::System::Com::IEnumString>;
    fn ChangeBrowsePosition(
        &self,
        dwbrowsedirection: tagOPCHDA_BROWSEDIRECTION,
        szstring: &windows_core::PCWSTR,
    ) -> windows_core::Result<()>;
    fn GetItemID(&self, sznode: &windows_core::PCWSTR)
        -> windows_core::Result<windows_core::PWSTR>;
    fn GetBranchPosition(&self) -> windows_core::Result<windows_core::PWSTR>;
}
impl IOPCHDA_Browser_Vtbl {
    pub const fn new<Identity: IOPCHDA_Browser_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn GetEnum<Identity: IOPCHDA_Browser_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            dwbrowsetype: tagOPCHDA_BROWSETYPE,
            ppienumstring: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IOPCHDA_Browser_Impl::GetEnum(this, core::mem::transmute_copy(&dwbrowsetype))
                {
                    Ok(ok__) => {
                        ppienumstring.write(core::mem::transmute(ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn ChangeBrowsePosition<
            Identity: IOPCHDA_Browser_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwbrowsedirection: tagOPCHDA_BROWSEDIRECTION,
            szstring: windows_core::PCWSTR,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_Browser_Impl::ChangeBrowsePosition(
                    this,
                    core::mem::transmute_copy(&dwbrowsedirection),
                    core::mem::transmute(&szstring),
                )
                .into()
            }
        }
        unsafe extern "system" fn GetItemID<Identity: IOPCHDA_Browser_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            sznode: windows_core::PCWSTR,
            pszitemid: *mut windows_core::PWSTR,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IOPCHDA_Browser_Impl::GetItemID(this, core::mem::transmute(&sznode)) {
                    Ok(ok__) => {
                        pszitemid.write(core::mem::transmute(ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn GetBranchPosition<
            Identity: IOPCHDA_Browser_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            pszbranchpos: *mut windows_core::PWSTR,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IOPCHDA_Browser_Impl::GetBranchPosition(this) {
                    Ok(ok__) => {
                        pszbranchpos.write(core::mem::transmute(ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            GetEnum: GetEnum::<Identity, OFFSET>,
            ChangeBrowsePosition: ChangeBrowsePosition::<Identity, OFFSET>,
            GetItemID: GetItemID::<Identity, OFFSET>,
            GetBranchPosition: GetBranchPosition::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IOPCHDA_Browser as windows_core::Interface>::IID
    }
}
impl windows_core::RuntimeName for IOPCHDA_Browser {}
windows_core::imp::define_interface!(
    IOPCHDA_DataCallback,
    IOPCHDA_DataCallback_Vtbl,
    0x1f1217b9_dee0_11d2_a5e5_000086339399
);
windows_core::imp::interface_hierarchy!(IOPCHDA_DataCallback, windows_core::IUnknown);
impl IOPCHDA_DataCallback {
    pub unsafe fn OnDataChange(
        &self,
        dwtransactionid: u32,
        hrstatus: windows_core::HRESULT,
        dwnumitems: u32,
        pitemvalues: *const tagOPCHDA_ITEM,
        phrerrors: *const windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).OnDataChange)(
                windows_core::Interface::as_raw(self),
                dwtransactionid,
                hrstatus,
                dwnumitems,
                pitemvalues,
                phrerrors,
            )
            .ok()
        }
    }
    pub unsafe fn OnReadComplete(
        &self,
        dwtransactionid: u32,
        hrstatus: windows_core::HRESULT,
        dwnumitems: u32,
        pitemvalues: *const tagOPCHDA_ITEM,
        phrerrors: *const windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).OnReadComplete)(
                windows_core::Interface::as_raw(self),
                dwtransactionid,
                hrstatus,
                dwnumitems,
                pitemvalues,
                phrerrors,
            )
            .ok()
        }
    }
    pub unsafe fn OnReadModifiedComplete(
        &self,
        dwtransactionid: u32,
        hrstatus: windows_core::HRESULT,
        dwnumitems: u32,
        pitemvalues: *const tagOPCHDA_MODIFIEDITEM,
        phrerrors: *const windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).OnReadModifiedComplete)(
                windows_core::Interface::as_raw(self),
                dwtransactionid,
                hrstatus,
                dwnumitems,
                pitemvalues,
                phrerrors,
            )
            .ok()
        }
    }
    pub unsafe fn OnReadAttributeComplete(
        &self,
        dwtransactionid: u32,
        hrstatus: windows_core::HRESULT,
        hclient: u32,
        dwnumitems: u32,
        pattributevalues: *const tagOPCHDA_ATTRIBUTE,
        phrerrors: *const windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).OnReadAttributeComplete)(
                windows_core::Interface::as_raw(self),
                dwtransactionid,
                hrstatus,
                hclient,
                dwnumitems,
                pattributevalues,
                phrerrors,
            )
            .ok()
        }
    }
    pub unsafe fn OnReadAnnotations(
        &self,
        dwtransactionid: u32,
        hrstatus: windows_core::HRESULT,
        dwnumitems: u32,
        pannotationvalues: *const tagOPCHDA_ANNOTATION,
        phrerrors: *const windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).OnReadAnnotations)(
                windows_core::Interface::as_raw(self),
                dwtransactionid,
                hrstatus,
                dwnumitems,
                pannotationvalues,
                phrerrors,
            )
            .ok()
        }
    }
    pub unsafe fn OnInsertAnnotations(
        &self,
        dwtransactionid: u32,
        hrstatus: windows_core::HRESULT,
        dwcount: u32,
        phclients: *const u32,
        phrerrors: *const windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).OnInsertAnnotations)(
                windows_core::Interface::as_raw(self),
                dwtransactionid,
                hrstatus,
                dwcount,
                phclients,
                phrerrors,
            )
            .ok()
        }
    }
    pub unsafe fn OnPlayback(
        &self,
        dwtransactionid: u32,
        hrstatus: windows_core::HRESULT,
        dwnumitems: u32,
        ppitemvalues: *const *const tagOPCHDA_ITEM,
        phrerrors: *const windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).OnPlayback)(
                windows_core::Interface::as_raw(self),
                dwtransactionid,
                hrstatus,
                dwnumitems,
                ppitemvalues,
                phrerrors,
            )
            .ok()
        }
    }
    pub unsafe fn OnUpdateComplete(
        &self,
        dwtransactionid: u32,
        hrstatus: windows_core::HRESULT,
        dwcount: u32,
        phclients: *const u32,
        phrerrors: *const windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).OnUpdateComplete)(
                windows_core::Interface::as_raw(self),
                dwtransactionid,
                hrstatus,
                dwcount,
                phclients,
                phrerrors,
            )
            .ok()
        }
    }
    pub unsafe fn OnCancelComplete(&self, dwcancelid: u32) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).OnCancelComplete)(
                windows_core::Interface::as_raw(self),
                dwcancelid,
            )
            .ok()
        }
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOPCHDA_DataCallback_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub OnDataChange: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        windows_core::HRESULT,
        u32,
        *const tagOPCHDA_ITEM,
        *const windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub OnReadComplete: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        windows_core::HRESULT,
        u32,
        *const tagOPCHDA_ITEM,
        *const windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub OnReadModifiedComplete: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        windows_core::HRESULT,
        u32,
        *const tagOPCHDA_MODIFIEDITEM,
        *const windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub OnReadAttributeComplete: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        windows_core::HRESULT,
        u32,
        u32,
        *const tagOPCHDA_ATTRIBUTE,
        *const windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub OnReadAnnotations: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        windows_core::HRESULT,
        u32,
        *const tagOPCHDA_ANNOTATION,
        *const windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub OnInsertAnnotations: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        windows_core::HRESULT,
        u32,
        *const u32,
        *const windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub OnPlayback: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        windows_core::HRESULT,
        u32,
        *const *const tagOPCHDA_ITEM,
        *const windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub OnUpdateComplete: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        windows_core::HRESULT,
        u32,
        *const u32,
        *const windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub OnCancelComplete:
        unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
}
pub trait IOPCHDA_DataCallback_Impl: windows_core::IUnknownImpl {
    fn OnDataChange(
        &self,
        dwtransactionid: u32,
        hrstatus: windows_core::HRESULT,
        dwnumitems: u32,
        pitemvalues: *const tagOPCHDA_ITEM,
        phrerrors: *const windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn OnReadComplete(
        &self,
        dwtransactionid: u32,
        hrstatus: windows_core::HRESULT,
        dwnumitems: u32,
        pitemvalues: *const tagOPCHDA_ITEM,
        phrerrors: *const windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn OnReadModifiedComplete(
        &self,
        dwtransactionid: u32,
        hrstatus: windows_core::HRESULT,
        dwnumitems: u32,
        pitemvalues: *const tagOPCHDA_MODIFIEDITEM,
        phrerrors: *const windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn OnReadAttributeComplete(
        &self,
        dwtransactionid: u32,
        hrstatus: windows_core::HRESULT,
        hclient: u32,
        dwnumitems: u32,
        pattributevalues: *const tagOPCHDA_ATTRIBUTE,
        phrerrors: *const windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn OnReadAnnotations(
        &self,
        dwtransactionid: u32,
        hrstatus: windows_core::HRESULT,
        dwnumitems: u32,
        pannotationvalues: *const tagOPCHDA_ANNOTATION,
        phrerrors: *const windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn OnInsertAnnotations(
        &self,
        dwtransactionid: u32,
        hrstatus: windows_core::HRESULT,
        dwcount: u32,
        phclients: *const u32,
        phrerrors: *const windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn OnPlayback(
        &self,
        dwtransactionid: u32,
        hrstatus: windows_core::HRESULT,
        dwnumitems: u32,
        ppitemvalues: *const *const tagOPCHDA_ITEM,
        phrerrors: *const windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn OnUpdateComplete(
        &self,
        dwtransactionid: u32,
        hrstatus: windows_core::HRESULT,
        dwcount: u32,
        phclients: *const u32,
        phrerrors: *const windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn OnCancelComplete(&self, dwcancelid: u32) -> windows_core::Result<()>;
}
impl IOPCHDA_DataCallback_Vtbl {
    pub const fn new<Identity: IOPCHDA_DataCallback_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn OnDataChange<
            Identity: IOPCHDA_DataCallback_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwtransactionid: u32,
            hrstatus: windows_core::HRESULT,
            dwnumitems: u32,
            pitemvalues: *const tagOPCHDA_ITEM,
            phrerrors: *const windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_DataCallback_Impl::OnDataChange(
                    this,
                    core::mem::transmute_copy(&dwtransactionid),
                    core::mem::transmute_copy(&hrstatus),
                    core::mem::transmute_copy(&dwnumitems),
                    core::mem::transmute_copy(&pitemvalues),
                    core::mem::transmute_copy(&phrerrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn OnReadComplete<
            Identity: IOPCHDA_DataCallback_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwtransactionid: u32,
            hrstatus: windows_core::HRESULT,
            dwnumitems: u32,
            pitemvalues: *const tagOPCHDA_ITEM,
            phrerrors: *const windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_DataCallback_Impl::OnReadComplete(
                    this,
                    core::mem::transmute_copy(&dwtransactionid),
                    core::mem::transmute_copy(&hrstatus),
                    core::mem::transmute_copy(&dwnumitems),
                    core::mem::transmute_copy(&pitemvalues),
                    core::mem::transmute_copy(&phrerrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn OnReadModifiedComplete<
            Identity: IOPCHDA_DataCallback_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwtransactionid: u32,
            hrstatus: windows_core::HRESULT,
            dwnumitems: u32,
            pitemvalues: *const tagOPCHDA_MODIFIEDITEM,
            phrerrors: *const windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_DataCallback_Impl::OnReadModifiedComplete(
                    this,
                    core::mem::transmute_copy(&dwtransactionid),
                    core::mem::transmute_copy(&hrstatus),
                    core::mem::transmute_copy(&dwnumitems),
                    core::mem::transmute_copy(&pitemvalues),
                    core::mem::transmute_copy(&phrerrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn OnReadAttributeComplete<
            Identity: IOPCHDA_DataCallback_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwtransactionid: u32,
            hrstatus: windows_core::HRESULT,
            hclient: u32,
            dwnumitems: u32,
            pattributevalues: *const tagOPCHDA_ATTRIBUTE,
            phrerrors: *const windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_DataCallback_Impl::OnReadAttributeComplete(
                    this,
                    core::mem::transmute_copy(&dwtransactionid),
                    core::mem::transmute_copy(&hrstatus),
                    core::mem::transmute_copy(&hclient),
                    core::mem::transmute_copy(&dwnumitems),
                    core::mem::transmute_copy(&pattributevalues),
                    core::mem::transmute_copy(&phrerrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn OnReadAnnotations<
            Identity: IOPCHDA_DataCallback_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwtransactionid: u32,
            hrstatus: windows_core::HRESULT,
            dwnumitems: u32,
            pannotationvalues: *const tagOPCHDA_ANNOTATION,
            phrerrors: *const windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_DataCallback_Impl::OnReadAnnotations(
                    this,
                    core::mem::transmute_copy(&dwtransactionid),
                    core::mem::transmute_copy(&hrstatus),
                    core::mem::transmute_copy(&dwnumitems),
                    core::mem::transmute_copy(&pannotationvalues),
                    core::mem::transmute_copy(&phrerrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn OnInsertAnnotations<
            Identity: IOPCHDA_DataCallback_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwtransactionid: u32,
            hrstatus: windows_core::HRESULT,
            dwcount: u32,
            phclients: *const u32,
            phrerrors: *const windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_DataCallback_Impl::OnInsertAnnotations(
                    this,
                    core::mem::transmute_copy(&dwtransactionid),
                    core::mem::transmute_copy(&hrstatus),
                    core::mem::transmute_copy(&dwcount),
                    core::mem::transmute_copy(&phclients),
                    core::mem::transmute_copy(&phrerrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn OnPlayback<
            Identity: IOPCHDA_DataCallback_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwtransactionid: u32,
            hrstatus: windows_core::HRESULT,
            dwnumitems: u32,
            ppitemvalues: *const *const tagOPCHDA_ITEM,
            phrerrors: *const windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_DataCallback_Impl::OnPlayback(
                    this,
                    core::mem::transmute_copy(&dwtransactionid),
                    core::mem::transmute_copy(&hrstatus),
                    core::mem::transmute_copy(&dwnumitems),
                    core::mem::transmute_copy(&ppitemvalues),
                    core::mem::transmute_copy(&phrerrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn OnUpdateComplete<
            Identity: IOPCHDA_DataCallback_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwtransactionid: u32,
            hrstatus: windows_core::HRESULT,
            dwcount: u32,
            phclients: *const u32,
            phrerrors: *const windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_DataCallback_Impl::OnUpdateComplete(
                    this,
                    core::mem::transmute_copy(&dwtransactionid),
                    core::mem::transmute_copy(&hrstatus),
                    core::mem::transmute_copy(&dwcount),
                    core::mem::transmute_copy(&phclients),
                    core::mem::transmute_copy(&phrerrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn OnCancelComplete<
            Identity: IOPCHDA_DataCallback_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwcancelid: u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_DataCallback_Impl::OnCancelComplete(
                    this,
                    core::mem::transmute_copy(&dwcancelid),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            OnDataChange: OnDataChange::<Identity, OFFSET>,
            OnReadComplete: OnReadComplete::<Identity, OFFSET>,
            OnReadModifiedComplete: OnReadModifiedComplete::<Identity, OFFSET>,
            OnReadAttributeComplete: OnReadAttributeComplete::<Identity, OFFSET>,
            OnReadAnnotations: OnReadAnnotations::<Identity, OFFSET>,
            OnInsertAnnotations: OnInsertAnnotations::<Identity, OFFSET>,
            OnPlayback: OnPlayback::<Identity, OFFSET>,
            OnUpdateComplete: OnUpdateComplete::<Identity, OFFSET>,
            OnCancelComplete: OnCancelComplete::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IOPCHDA_DataCallback as windows_core::Interface>::IID
    }
}
impl windows_core::RuntimeName for IOPCHDA_DataCallback {}
windows_core::imp::define_interface!(
    IOPCHDA_Playback,
    IOPCHDA_Playback_Vtbl,
    0x1f1217b8_dee0_11d2_a5e5_000086339399
);
windows_core::imp::interface_hierarchy!(IOPCHDA_Playback, windows_core::IUnknown);
impl IOPCHDA_Playback {
    pub unsafe fn ReadRawWithUpdate(
        &self,
        dwtransactionid: u32,
        htstarttime: *mut tagOPCHDA_TIME,
        htendtime: *mut tagOPCHDA_TIME,
        dwnumvalues: u32,
        ftupdateduration: windows::Win32::Foundation::FILETIME,
        ftupdateinterval: windows::Win32::Foundation::FILETIME,
        dwnumitems: u32,
        phserver: *const u32,
        pdwcancelid: *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).ReadRawWithUpdate)(
                windows_core::Interface::as_raw(self),
                dwtransactionid,
                htstarttime as _,
                htendtime as _,
                dwnumvalues,
                core::mem::transmute(ftupdateduration),
                core::mem::transmute(ftupdateinterval),
                dwnumitems,
                phserver,
                pdwcancelid as _,
                pperrors as _,
            )
            .ok()
        }
    }
    pub unsafe fn ReadProcessedWithUpdate(
        &self,
        dwtransactionid: u32,
        htstarttime: *mut tagOPCHDA_TIME,
        htendtime: *mut tagOPCHDA_TIME,
        ftresampleinterval: windows::Win32::Foundation::FILETIME,
        dwnumintervals: u32,
        ftupdateinterval: windows::Win32::Foundation::FILETIME,
        dwnumitems: u32,
        phserver: *const u32,
        haaggregate: *const u32,
        pdwcancelid: *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).ReadProcessedWithUpdate)(
                windows_core::Interface::as_raw(self),
                dwtransactionid,
                htstarttime as _,
                htendtime as _,
                core::mem::transmute(ftresampleinterval),
                dwnumintervals,
                core::mem::transmute(ftupdateinterval),
                dwnumitems,
                phserver,
                haaggregate,
                pdwcancelid as _,
                pperrors as _,
            )
            .ok()
        }
    }
    pub unsafe fn Cancel(&self, dwcancelid: u32) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).Cancel)(
                windows_core::Interface::as_raw(self),
                dwcancelid,
            )
            .ok()
        }
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOPCHDA_Playback_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub ReadRawWithUpdate: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut tagOPCHDA_TIME,
        *mut tagOPCHDA_TIME,
        u32,
        windows::Win32::Foundation::FILETIME,
        windows::Win32::Foundation::FILETIME,
        u32,
        *const u32,
        *mut u32,
        *mut *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub ReadProcessedWithUpdate: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut tagOPCHDA_TIME,
        *mut tagOPCHDA_TIME,
        windows::Win32::Foundation::FILETIME,
        u32,
        windows::Win32::Foundation::FILETIME,
        u32,
        *const u32,
        *const u32,
        *mut u32,
        *mut *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub Cancel: unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
}
pub trait IOPCHDA_Playback_Impl: windows_core::IUnknownImpl {
    fn ReadRawWithUpdate(
        &self,
        dwtransactionid: u32,
        htstarttime: *mut tagOPCHDA_TIME,
        htendtime: *mut tagOPCHDA_TIME,
        dwnumvalues: u32,
        ftupdateduration: &windows::Win32::Foundation::FILETIME,
        ftupdateinterval: &windows::Win32::Foundation::FILETIME,
        dwnumitems: u32,
        phserver: *const u32,
        pdwcancelid: *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn ReadProcessedWithUpdate(
        &self,
        dwtransactionid: u32,
        htstarttime: *mut tagOPCHDA_TIME,
        htendtime: *mut tagOPCHDA_TIME,
        ftresampleinterval: &windows::Win32::Foundation::FILETIME,
        dwnumintervals: u32,
        ftupdateinterval: &windows::Win32::Foundation::FILETIME,
        dwnumitems: u32,
        phserver: *const u32,
        haaggregate: *const u32,
        pdwcancelid: *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn Cancel(&self, dwcancelid: u32) -> windows_core::Result<()>;
}
impl IOPCHDA_Playback_Vtbl {
    pub const fn new<Identity: IOPCHDA_Playback_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ReadRawWithUpdate<
            Identity: IOPCHDA_Playback_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwtransactionid: u32,
            htstarttime: *mut tagOPCHDA_TIME,
            htendtime: *mut tagOPCHDA_TIME,
            dwnumvalues: u32,
            ftupdateduration: windows::Win32::Foundation::FILETIME,
            ftupdateinterval: windows::Win32::Foundation::FILETIME,
            dwnumitems: u32,
            phserver: *const u32,
            pdwcancelid: *mut u32,
            pperrors: *mut *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_Playback_Impl::ReadRawWithUpdate(
                    this,
                    core::mem::transmute_copy(&dwtransactionid),
                    core::mem::transmute_copy(&htstarttime),
                    core::mem::transmute_copy(&htendtime),
                    core::mem::transmute_copy(&dwnumvalues),
                    core::mem::transmute(&ftupdateduration),
                    core::mem::transmute(&ftupdateinterval),
                    core::mem::transmute_copy(&dwnumitems),
                    core::mem::transmute_copy(&phserver),
                    core::mem::transmute_copy(&pdwcancelid),
                    core::mem::transmute_copy(&pperrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn ReadProcessedWithUpdate<
            Identity: IOPCHDA_Playback_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwtransactionid: u32,
            htstarttime: *mut tagOPCHDA_TIME,
            htendtime: *mut tagOPCHDA_TIME,
            ftresampleinterval: windows::Win32::Foundation::FILETIME,
            dwnumintervals: u32,
            ftupdateinterval: windows::Win32::Foundation::FILETIME,
            dwnumitems: u32,
            phserver: *const u32,
            haaggregate: *const u32,
            pdwcancelid: *mut u32,
            pperrors: *mut *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_Playback_Impl::ReadProcessedWithUpdate(
                    this,
                    core::mem::transmute_copy(&dwtransactionid),
                    core::mem::transmute_copy(&htstarttime),
                    core::mem::transmute_copy(&htendtime),
                    core::mem::transmute(&ftresampleinterval),
                    core::mem::transmute_copy(&dwnumintervals),
                    core::mem::transmute(&ftupdateinterval),
                    core::mem::transmute_copy(&dwnumitems),
                    core::mem::transmute_copy(&phserver),
                    core::mem::transmute_copy(&haaggregate),
                    core::mem::transmute_copy(&pdwcancelid),
                    core::mem::transmute_copy(&pperrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn Cancel<Identity: IOPCHDA_Playback_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            dwcancelid: u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_Playback_Impl::Cancel(this, core::mem::transmute_copy(&dwcancelid)).into()
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            ReadRawWithUpdate: ReadRawWithUpdate::<Identity, OFFSET>,
            ReadProcessedWithUpdate: ReadProcessedWithUpdate::<Identity, OFFSET>,
            Cancel: Cancel::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IOPCHDA_Playback as windows_core::Interface>::IID
    }
}
impl windows_core::RuntimeName for IOPCHDA_Playback {}
windows_core::imp::define_interface!(
    IOPCHDA_Server,
    IOPCHDA_Server_Vtbl,
    0x1f1217b0_dee0_11d2_a5e5_000086339399
);
windows_core::imp::interface_hierarchy!(IOPCHDA_Server, windows_core::IUnknown);
impl IOPCHDA_Server {
    pub unsafe fn GetItemAttributes(
        &self,
        pdwcount: *mut u32,
        ppdwattrid: *mut *mut u32,
        ppszattrname: *mut *mut windows_core::PWSTR,
        ppszattrdesc: *mut *mut windows_core::PWSTR,
        ppvtattrdatatype: *mut *mut u16,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).GetItemAttributes)(
                windows_core::Interface::as_raw(self),
                pdwcount as _,
                ppdwattrid as _,
                ppszattrname as _,
                ppszattrdesc as _,
                ppvtattrdatatype as _,
            )
            .ok()
        }
    }
    pub unsafe fn GetAggregates(
        &self,
        pdwcount: *mut u32,
        ppdwaggrid: *mut *mut u32,
        ppszaggrname: *mut *mut windows_core::PWSTR,
        ppszaggrdesc: *mut *mut windows_core::PWSTR,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).GetAggregates)(
                windows_core::Interface::as_raw(self),
                pdwcount as _,
                ppdwaggrid as _,
                ppszaggrname as _,
                ppszaggrdesc as _,
            )
            .ok()
        }
    }
    pub unsafe fn GetHistorianStatus(
        &self,
        pwstatus: *mut tagOPCHDA_SERVERSTATUS,
        pftcurrenttime: *mut *mut windows::Win32::Foundation::FILETIME,
        pftstarttime: *mut *mut windows::Win32::Foundation::FILETIME,
        pwmajorversion: *mut u16,
        pwminorversion: *mut u16,
        pwbuildnumber: *mut u16,
        pdwmaxreturnvalues: *mut u32,
        ppszstatusstring: *mut windows_core::PWSTR,
        ppszvendorinfo: *mut windows_core::PWSTR,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).GetHistorianStatus)(
                windows_core::Interface::as_raw(self),
                pwstatus as _,
                pftcurrenttime as _,
                pftstarttime as _,
                pwmajorversion as _,
                pwminorversion as _,
                pwbuildnumber as _,
                pdwmaxreturnvalues as _,
                ppszstatusstring as _,
                ppszvendorinfo as _,
            )
            .ok()
        }
    }
    pub unsafe fn GetItemHandles(
        &self,
        dwcount: u32,
        pszitemid: *const windows_core::PCWSTR,
        phclient: *const u32,
        pphserver: *mut *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).GetItemHandles)(
                windows_core::Interface::as_raw(self),
                dwcount,
                pszitemid,
                phclient,
                pphserver as _,
                pperrors as _,
            )
            .ok()
        }
    }
    pub unsafe fn ReleaseItemHandles(
        &self,
        dwcount: u32,
        phserver: *const u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).ReleaseItemHandles)(
                windows_core::Interface::as_raw(self),
                dwcount,
                phserver,
                pperrors as _,
            )
            .ok()
        }
    }
    pub unsafe fn ValidateItemIDs(
        &self,
        dwcount: u32,
        pszitemid: *const windows_core::PCWSTR,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).ValidateItemIDs)(
                windows_core::Interface::as_raw(self),
                dwcount,
                pszitemid,
                pperrors as _,
            )
            .ok()
        }
    }
    pub unsafe fn CreateBrowse(
        &self,
        dwcount: u32,
        pdwattrid: *const u32,
        poperator: *const tagOPCHDA_OPERATORCODES,
        vfilter: *const windows::Win32::System::Variant::VARIANT,
        pphbrowser: *mut Option<IOPCHDA_Browser>,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).CreateBrowse)(
                windows_core::Interface::as_raw(self),
                dwcount,
                pdwattrid,
                poperator,
                core::mem::transmute(vfilter),
                core::mem::transmute(pphbrowser),
                pperrors as _,
            )
            .ok()
        }
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOPCHDA_Server_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub GetItemAttributes: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut u32,
        *mut *mut u32,
        *mut *mut windows_core::PWSTR,
        *mut *mut windows_core::PWSTR,
        *mut *mut u16,
    ) -> windows_core::HRESULT,
    pub GetAggregates: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut u32,
        *mut *mut u32,
        *mut *mut windows_core::PWSTR,
        *mut *mut windows_core::PWSTR,
    ) -> windows_core::HRESULT,
    pub GetHistorianStatus: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut tagOPCHDA_SERVERSTATUS,
        *mut *mut windows::Win32::Foundation::FILETIME,
        *mut *mut windows::Win32::Foundation::FILETIME,
        *mut u16,
        *mut u16,
        *mut u16,
        *mut u32,
        *mut windows_core::PWSTR,
        *mut windows_core::PWSTR,
    ) -> windows_core::HRESULT,
    pub GetItemHandles: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *const windows_core::PCWSTR,
        *const u32,
        *mut *mut u32,
        *mut *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub ReleaseItemHandles: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *const u32,
        *mut *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub ValidateItemIDs: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *const windows_core::PCWSTR,
        *mut *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub CreateBrowse: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *const u32,
        *const tagOPCHDA_OPERATORCODES,
        *const windows::Win32::System::Variant::VARIANT,
        *mut *mut core::ffi::c_void,
        *mut *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
}
pub trait IOPCHDA_Server_Impl: windows_core::IUnknownImpl {
    fn GetItemAttributes(
        &self,
        pdwcount: *mut u32,
        ppdwattrid: *mut *mut u32,
        ppszattrname: *mut *mut windows_core::PWSTR,
        ppszattrdesc: *mut *mut windows_core::PWSTR,
        ppvtattrdatatype: *mut *mut u16,
    ) -> windows_core::Result<()>;
    fn GetAggregates(
        &self,
        pdwcount: *mut u32,
        ppdwaggrid: *mut *mut u32,
        ppszaggrname: *mut *mut windows_core::PWSTR,
        ppszaggrdesc: *mut *mut windows_core::PWSTR,
    ) -> windows_core::Result<()>;
    fn GetHistorianStatus(
        &self,
        pwstatus: *mut tagOPCHDA_SERVERSTATUS,
        pftcurrenttime: *mut *mut windows::Win32::Foundation::FILETIME,
        pftstarttime: *mut *mut windows::Win32::Foundation::FILETIME,
        pwmajorversion: *mut u16,
        pwminorversion: *mut u16,
        pwbuildnumber: *mut u16,
        pdwmaxreturnvalues: *mut u32,
        ppszstatusstring: *mut windows_core::PWSTR,
        ppszvendorinfo: *mut windows_core::PWSTR,
    ) -> windows_core::Result<()>;
    fn GetItemHandles(
        &self,
        dwcount: u32,
        pszitemid: *const windows_core::PCWSTR,
        phclient: *const u32,
        pphserver: *mut *mut u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn ReleaseItemHandles(
        &self,
        dwcount: u32,
        phserver: *const u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn ValidateItemIDs(
        &self,
        dwcount: u32,
        pszitemid: *const windows_core::PCWSTR,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn CreateBrowse(
        &self,
        dwcount: u32,
        pdwattrid: *const u32,
        poperator: *const tagOPCHDA_OPERATORCODES,
        vfilter: *const windows::Win32::System::Variant::VARIANT,
        pphbrowser: windows_core::OutRef<'_, IOPCHDA_Browser>,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()>;
}
impl IOPCHDA_Server_Vtbl {
    pub const fn new<Identity: IOPCHDA_Server_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn GetItemAttributes<
            Identity: IOPCHDA_Server_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            pdwcount: *mut u32,
            ppdwattrid: *mut *mut u32,
            ppszattrname: *mut *mut windows_core::PWSTR,
            ppszattrdesc: *mut *mut windows_core::PWSTR,
            ppvtattrdatatype: *mut *mut u16,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_Server_Impl::GetItemAttributes(
                    this,
                    core::mem::transmute_copy(&pdwcount),
                    core::mem::transmute_copy(&ppdwattrid),
                    core::mem::transmute_copy(&ppszattrname),
                    core::mem::transmute_copy(&ppszattrdesc),
                    core::mem::transmute_copy(&ppvtattrdatatype),
                )
                .into()
            }
        }
        unsafe extern "system" fn GetAggregates<
            Identity: IOPCHDA_Server_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            pdwcount: *mut u32,
            ppdwaggrid: *mut *mut u32,
            ppszaggrname: *mut *mut windows_core::PWSTR,
            ppszaggrdesc: *mut *mut windows_core::PWSTR,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_Server_Impl::GetAggregates(
                    this,
                    core::mem::transmute_copy(&pdwcount),
                    core::mem::transmute_copy(&ppdwaggrid),
                    core::mem::transmute_copy(&ppszaggrname),
                    core::mem::transmute_copy(&ppszaggrdesc),
                )
                .into()
            }
        }
        unsafe extern "system" fn GetHistorianStatus<
            Identity: IOPCHDA_Server_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            pwstatus: *mut tagOPCHDA_SERVERSTATUS,
            pftcurrenttime: *mut *mut windows::Win32::Foundation::FILETIME,
            pftstarttime: *mut *mut windows::Win32::Foundation::FILETIME,
            pwmajorversion: *mut u16,
            pwminorversion: *mut u16,
            pwbuildnumber: *mut u16,
            pdwmaxreturnvalues: *mut u32,
            ppszstatusstring: *mut windows_core::PWSTR,
            ppszvendorinfo: *mut windows_core::PWSTR,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_Server_Impl::GetHistorianStatus(
                    this,
                    core::mem::transmute_copy(&pwstatus),
                    core::mem::transmute_copy(&pftcurrenttime),
                    core::mem::transmute_copy(&pftstarttime),
                    core::mem::transmute_copy(&pwmajorversion),
                    core::mem::transmute_copy(&pwminorversion),
                    core::mem::transmute_copy(&pwbuildnumber),
                    core::mem::transmute_copy(&pdwmaxreturnvalues),
                    core::mem::transmute_copy(&ppszstatusstring),
                    core::mem::transmute_copy(&ppszvendorinfo),
                )
                .into()
            }
        }
        unsafe extern "system" fn GetItemHandles<
            Identity: IOPCHDA_Server_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwcount: u32,
            pszitemid: *const windows_core::PCWSTR,
            phclient: *const u32,
            pphserver: *mut *mut u32,
            pperrors: *mut *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_Server_Impl::GetItemHandles(
                    this,
                    core::mem::transmute_copy(&dwcount),
                    core::mem::transmute_copy(&pszitemid),
                    core::mem::transmute_copy(&phclient),
                    core::mem::transmute_copy(&pphserver),
                    core::mem::transmute_copy(&pperrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn ReleaseItemHandles<
            Identity: IOPCHDA_Server_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwcount: u32,
            phserver: *const u32,
            pperrors: *mut *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_Server_Impl::ReleaseItemHandles(
                    this,
                    core::mem::transmute_copy(&dwcount),
                    core::mem::transmute_copy(&phserver),
                    core::mem::transmute_copy(&pperrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn ValidateItemIDs<
            Identity: IOPCHDA_Server_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwcount: u32,
            pszitemid: *const windows_core::PCWSTR,
            pperrors: *mut *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_Server_Impl::ValidateItemIDs(
                    this,
                    core::mem::transmute_copy(&dwcount),
                    core::mem::transmute_copy(&pszitemid),
                    core::mem::transmute_copy(&pperrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn CreateBrowse<
            Identity: IOPCHDA_Server_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwcount: u32,
            pdwattrid: *const u32,
            poperator: *const tagOPCHDA_OPERATORCODES,
            vfilter: *const windows::Win32::System::Variant::VARIANT,
            pphbrowser: *mut *mut core::ffi::c_void,
            pperrors: *mut *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_Server_Impl::CreateBrowse(
                    this,
                    core::mem::transmute_copy(&dwcount),
                    core::mem::transmute_copy(&pdwattrid),
                    core::mem::transmute_copy(&poperator),
                    core::mem::transmute_copy(&vfilter),
                    core::mem::transmute_copy(&pphbrowser),
                    core::mem::transmute_copy(&pperrors),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            GetItemAttributes: GetItemAttributes::<Identity, OFFSET>,
            GetAggregates: GetAggregates::<Identity, OFFSET>,
            GetHistorianStatus: GetHistorianStatus::<Identity, OFFSET>,
            GetItemHandles: GetItemHandles::<Identity, OFFSET>,
            ReleaseItemHandles: ReleaseItemHandles::<Identity, OFFSET>,
            ValidateItemIDs: ValidateItemIDs::<Identity, OFFSET>,
            CreateBrowse: CreateBrowse::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IOPCHDA_Server as windows_core::Interface>::IID
    }
}
impl windows_core::RuntimeName for IOPCHDA_Server {}
windows_core::imp::define_interface!(
    IOPCHDA_SyncAnnotations,
    IOPCHDA_SyncAnnotations_Vtbl,
    0x1f1217b4_dee0_11d2_a5e5_000086339399
);
windows_core::imp::interface_hierarchy!(IOPCHDA_SyncAnnotations, windows_core::IUnknown);
impl IOPCHDA_SyncAnnotations {
    pub unsafe fn QueryCapabilities(
        &self,
    ) -> windows_core::Result<tagOPCHDA_ANNOTATIONCAPABILITIES> {
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).QueryCapabilities)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub unsafe fn Read(
        &self,
        htstarttime: *mut tagOPCHDA_TIME,
        htendtime: *mut tagOPCHDA_TIME,
        dwnumitems: u32,
        phserver: *const u32,
        ppannotationvalues: *mut *mut tagOPCHDA_ANNOTATION,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).Read)(
                windows_core::Interface::as_raw(self),
                htstarttime as _,
                htendtime as _,
                dwnumitems,
                phserver,
                ppannotationvalues as _,
                pperrors as _,
            )
            .ok()
        }
    }
    pub unsafe fn Insert(
        &self,
        dwnumitems: u32,
        phserver: *const u32,
        fttimestamps: *const windows::Win32::Foundation::FILETIME,
        pannotationvalues: *const tagOPCHDA_ANNOTATION,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).Insert)(
                windows_core::Interface::as_raw(self),
                dwnumitems,
                phserver,
                fttimestamps,
                pannotationvalues,
                pperrors as _,
            )
            .ok()
        }
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOPCHDA_SyncAnnotations_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub QueryCapabilities: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut tagOPCHDA_ANNOTATIONCAPABILITIES,
    ) -> windows_core::HRESULT,
    pub Read: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut tagOPCHDA_TIME,
        *mut tagOPCHDA_TIME,
        u32,
        *const u32,
        *mut *mut tagOPCHDA_ANNOTATION,
        *mut *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub Insert: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *const u32,
        *const windows::Win32::Foundation::FILETIME,
        *const tagOPCHDA_ANNOTATION,
        *mut *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
}
pub trait IOPCHDA_SyncAnnotations_Impl: windows_core::IUnknownImpl {
    fn QueryCapabilities(&self) -> windows_core::Result<tagOPCHDA_ANNOTATIONCAPABILITIES>;
    fn Read(
        &self,
        htstarttime: *mut tagOPCHDA_TIME,
        htendtime: *mut tagOPCHDA_TIME,
        dwnumitems: u32,
        phserver: *const u32,
        ppannotationvalues: *mut *mut tagOPCHDA_ANNOTATION,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn Insert(
        &self,
        dwnumitems: u32,
        phserver: *const u32,
        fttimestamps: *const windows::Win32::Foundation::FILETIME,
        pannotationvalues: *const tagOPCHDA_ANNOTATION,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()>;
}
impl IOPCHDA_SyncAnnotations_Vtbl {
    pub const fn new<Identity: IOPCHDA_SyncAnnotations_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn QueryCapabilities<
            Identity: IOPCHDA_SyncAnnotations_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            pcapabilities: *mut tagOPCHDA_ANNOTATIONCAPABILITIES,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IOPCHDA_SyncAnnotations_Impl::QueryCapabilities(this) {
                    Ok(ok__) => {
                        pcapabilities.write(core::mem::transmute(ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Read<
            Identity: IOPCHDA_SyncAnnotations_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            htstarttime: *mut tagOPCHDA_TIME,
            htendtime: *mut tagOPCHDA_TIME,
            dwnumitems: u32,
            phserver: *const u32,
            ppannotationvalues: *mut *mut tagOPCHDA_ANNOTATION,
            pperrors: *mut *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_SyncAnnotations_Impl::Read(
                    this,
                    core::mem::transmute_copy(&htstarttime),
                    core::mem::transmute_copy(&htendtime),
                    core::mem::transmute_copy(&dwnumitems),
                    core::mem::transmute_copy(&phserver),
                    core::mem::transmute_copy(&ppannotationvalues),
                    core::mem::transmute_copy(&pperrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn Insert<
            Identity: IOPCHDA_SyncAnnotations_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwnumitems: u32,
            phserver: *const u32,
            fttimestamps: *const windows::Win32::Foundation::FILETIME,
            pannotationvalues: *const tagOPCHDA_ANNOTATION,
            pperrors: *mut *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_SyncAnnotations_Impl::Insert(
                    this,
                    core::mem::transmute_copy(&dwnumitems),
                    core::mem::transmute_copy(&phserver),
                    core::mem::transmute_copy(&fttimestamps),
                    core::mem::transmute_copy(&pannotationvalues),
                    core::mem::transmute_copy(&pperrors),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            QueryCapabilities: QueryCapabilities::<Identity, OFFSET>,
            Read: Read::<Identity, OFFSET>,
            Insert: Insert::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IOPCHDA_SyncAnnotations as windows_core::Interface>::IID
    }
}
impl windows_core::RuntimeName for IOPCHDA_SyncAnnotations {}
windows_core::imp::define_interface!(
    IOPCHDA_SyncRead,
    IOPCHDA_SyncRead_Vtbl,
    0x1f1217b2_dee0_11d2_a5e5_000086339399
);
windows_core::imp::interface_hierarchy!(IOPCHDA_SyncRead, windows_core::IUnknown);
impl IOPCHDA_SyncRead {
    pub unsafe fn ReadRaw(
        &self,
        htstarttime: *mut tagOPCHDA_TIME,
        htendtime: *mut tagOPCHDA_TIME,
        dwnumvalues: u32,
        bbounds: bool,
        dwnumitems: u32,
        phserver: *const u32,
        ppitemvalues: *mut *mut tagOPCHDA_ITEM,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).ReadRaw)(
                windows_core::Interface::as_raw(self),
                htstarttime as _,
                htendtime as _,
                dwnumvalues,
                bbounds.into(),
                dwnumitems,
                phserver,
                ppitemvalues as _,
                pperrors as _,
            )
            .ok()
        }
    }
    pub unsafe fn ReadProcessed(
        &self,
        htstarttime: *mut tagOPCHDA_TIME,
        htendtime: *mut tagOPCHDA_TIME,
        ftresampleinterval: windows::Win32::Foundation::FILETIME,
        dwnumitems: u32,
        phserver: *const u32,
        haaggregate: *const u32,
        ppitemvalues: *mut *mut tagOPCHDA_ITEM,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).ReadProcessed)(
                windows_core::Interface::as_raw(self),
                htstarttime as _,
                htendtime as _,
                core::mem::transmute(ftresampleinterval),
                dwnumitems,
                phserver,
                haaggregate,
                ppitemvalues as _,
                pperrors as _,
            )
            .ok()
        }
    }
    pub unsafe fn ReadAtTime(
        &self,
        fttimestamps: &[windows::Win32::Foundation::FILETIME],
        dwnumitems: u32,
        phserver: *const u32,
        ppitemvalues: *mut *mut tagOPCHDA_ITEM,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).ReadAtTime)(
                windows_core::Interface::as_raw(self),
                fttimestamps.len().try_into().unwrap(),
                core::mem::transmute(fttimestamps.as_ptr()),
                dwnumitems,
                phserver,
                ppitemvalues as _,
                pperrors as _,
            )
            .ok()
        }
    }
    pub unsafe fn ReadModified(
        &self,
        htstarttime: *mut tagOPCHDA_TIME,
        htendtime: *mut tagOPCHDA_TIME,
        dwnumvalues: u32,
        dwnumitems: u32,
        phserver: *const u32,
        ppitemvalues: *mut *mut tagOPCHDA_MODIFIEDITEM,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).ReadModified)(
                windows_core::Interface::as_raw(self),
                htstarttime as _,
                htendtime as _,
                dwnumvalues,
                dwnumitems,
                phserver,
                ppitemvalues as _,
                pperrors as _,
            )
            .ok()
        }
    }
    pub unsafe fn ReadAttribute(
        &self,
        htstarttime: *mut tagOPCHDA_TIME,
        htendtime: *mut tagOPCHDA_TIME,
        hserver: u32,
        dwnumattributes: u32,
        pdwattributeids: *const u32,
        ppattributevalues: *mut *mut tagOPCHDA_ATTRIBUTE,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).ReadAttribute)(
                windows_core::Interface::as_raw(self),
                htstarttime as _,
                htendtime as _,
                hserver,
                dwnumattributes,
                pdwattributeids,
                ppattributevalues as _,
                pperrors as _,
            )
            .ok()
        }
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOPCHDA_SyncRead_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub ReadRaw: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut tagOPCHDA_TIME,
        *mut tagOPCHDA_TIME,
        u32,
        windows_core::BOOL,
        u32,
        *const u32,
        *mut *mut tagOPCHDA_ITEM,
        *mut *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub ReadProcessed: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut tagOPCHDA_TIME,
        *mut tagOPCHDA_TIME,
        windows::Win32::Foundation::FILETIME,
        u32,
        *const u32,
        *const u32,
        *mut *mut tagOPCHDA_ITEM,
        *mut *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub ReadAtTime: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *const windows::Win32::Foundation::FILETIME,
        u32,
        *const u32,
        *mut *mut tagOPCHDA_ITEM,
        *mut *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub ReadModified: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut tagOPCHDA_TIME,
        *mut tagOPCHDA_TIME,
        u32,
        u32,
        *const u32,
        *mut *mut tagOPCHDA_MODIFIEDITEM,
        *mut *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub ReadAttribute: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut tagOPCHDA_TIME,
        *mut tagOPCHDA_TIME,
        u32,
        u32,
        *const u32,
        *mut *mut tagOPCHDA_ATTRIBUTE,
        *mut *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
}
pub trait IOPCHDA_SyncRead_Impl: windows_core::IUnknownImpl {
    fn ReadRaw(
        &self,
        htstarttime: *mut tagOPCHDA_TIME,
        htendtime: *mut tagOPCHDA_TIME,
        dwnumvalues: u32,
        bbounds: windows_core::BOOL,
        dwnumitems: u32,
        phserver: *const u32,
        ppitemvalues: *mut *mut tagOPCHDA_ITEM,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn ReadProcessed(
        &self,
        htstarttime: *mut tagOPCHDA_TIME,
        htendtime: *mut tagOPCHDA_TIME,
        ftresampleinterval: &windows::Win32::Foundation::FILETIME,
        dwnumitems: u32,
        phserver: *const u32,
        haaggregate: *const u32,
        ppitemvalues: *mut *mut tagOPCHDA_ITEM,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn ReadAtTime(
        &self,
        dwnumtimestamps: u32,
        fttimestamps: *const windows::Win32::Foundation::FILETIME,
        dwnumitems: u32,
        phserver: *const u32,
        ppitemvalues: *mut *mut tagOPCHDA_ITEM,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn ReadModified(
        &self,
        htstarttime: *mut tagOPCHDA_TIME,
        htendtime: *mut tagOPCHDA_TIME,
        dwnumvalues: u32,
        dwnumitems: u32,
        phserver: *const u32,
        ppitemvalues: *mut *mut tagOPCHDA_MODIFIEDITEM,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn ReadAttribute(
        &self,
        htstarttime: *mut tagOPCHDA_TIME,
        htendtime: *mut tagOPCHDA_TIME,
        hserver: u32,
        dwnumattributes: u32,
        pdwattributeids: *const u32,
        ppattributevalues: *mut *mut tagOPCHDA_ATTRIBUTE,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()>;
}
impl IOPCHDA_SyncRead_Vtbl {
    pub const fn new<Identity: IOPCHDA_SyncRead_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn ReadRaw<Identity: IOPCHDA_SyncRead_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            htstarttime: *mut tagOPCHDA_TIME,
            htendtime: *mut tagOPCHDA_TIME,
            dwnumvalues: u32,
            bbounds: windows_core::BOOL,
            dwnumitems: u32,
            phserver: *const u32,
            ppitemvalues: *mut *mut tagOPCHDA_ITEM,
            pperrors: *mut *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_SyncRead_Impl::ReadRaw(
                    this,
                    core::mem::transmute_copy(&htstarttime),
                    core::mem::transmute_copy(&htendtime),
                    core::mem::transmute_copy(&dwnumvalues),
                    core::mem::transmute_copy(&bbounds),
                    core::mem::transmute_copy(&dwnumitems),
                    core::mem::transmute_copy(&phserver),
                    core::mem::transmute_copy(&ppitemvalues),
                    core::mem::transmute_copy(&pperrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn ReadProcessed<
            Identity: IOPCHDA_SyncRead_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            htstarttime: *mut tagOPCHDA_TIME,
            htendtime: *mut tagOPCHDA_TIME,
            ftresampleinterval: windows::Win32::Foundation::FILETIME,
            dwnumitems: u32,
            phserver: *const u32,
            haaggregate: *const u32,
            ppitemvalues: *mut *mut tagOPCHDA_ITEM,
            pperrors: *mut *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_SyncRead_Impl::ReadProcessed(
                    this,
                    core::mem::transmute_copy(&htstarttime),
                    core::mem::transmute_copy(&htendtime),
                    core::mem::transmute(&ftresampleinterval),
                    core::mem::transmute_copy(&dwnumitems),
                    core::mem::transmute_copy(&phserver),
                    core::mem::transmute_copy(&haaggregate),
                    core::mem::transmute_copy(&ppitemvalues),
                    core::mem::transmute_copy(&pperrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn ReadAtTime<
            Identity: IOPCHDA_SyncRead_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwnumtimestamps: u32,
            fttimestamps: *const windows::Win32::Foundation::FILETIME,
            dwnumitems: u32,
            phserver: *const u32,
            ppitemvalues: *mut *mut tagOPCHDA_ITEM,
            pperrors: *mut *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_SyncRead_Impl::ReadAtTime(
                    this,
                    core::mem::transmute_copy(&dwnumtimestamps),
                    core::mem::transmute_copy(&fttimestamps),
                    core::mem::transmute_copy(&dwnumitems),
                    core::mem::transmute_copy(&phserver),
                    core::mem::transmute_copy(&ppitemvalues),
                    core::mem::transmute_copy(&pperrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn ReadModified<
            Identity: IOPCHDA_SyncRead_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            htstarttime: *mut tagOPCHDA_TIME,
            htendtime: *mut tagOPCHDA_TIME,
            dwnumvalues: u32,
            dwnumitems: u32,
            phserver: *const u32,
            ppitemvalues: *mut *mut tagOPCHDA_MODIFIEDITEM,
            pperrors: *mut *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_SyncRead_Impl::ReadModified(
                    this,
                    core::mem::transmute_copy(&htstarttime),
                    core::mem::transmute_copy(&htendtime),
                    core::mem::transmute_copy(&dwnumvalues),
                    core::mem::transmute_copy(&dwnumitems),
                    core::mem::transmute_copy(&phserver),
                    core::mem::transmute_copy(&ppitemvalues),
                    core::mem::transmute_copy(&pperrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn ReadAttribute<
            Identity: IOPCHDA_SyncRead_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            htstarttime: *mut tagOPCHDA_TIME,
            htendtime: *mut tagOPCHDA_TIME,
            hserver: u32,
            dwnumattributes: u32,
            pdwattributeids: *const u32,
            ppattributevalues: *mut *mut tagOPCHDA_ATTRIBUTE,
            pperrors: *mut *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_SyncRead_Impl::ReadAttribute(
                    this,
                    core::mem::transmute_copy(&htstarttime),
                    core::mem::transmute_copy(&htendtime),
                    core::mem::transmute_copy(&hserver),
                    core::mem::transmute_copy(&dwnumattributes),
                    core::mem::transmute_copy(&pdwattributeids),
                    core::mem::transmute_copy(&ppattributevalues),
                    core::mem::transmute_copy(&pperrors),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            ReadRaw: ReadRaw::<Identity, OFFSET>,
            ReadProcessed: ReadProcessed::<Identity, OFFSET>,
            ReadAtTime: ReadAtTime::<Identity, OFFSET>,
            ReadModified: ReadModified::<Identity, OFFSET>,
            ReadAttribute: ReadAttribute::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IOPCHDA_SyncRead as windows_core::Interface>::IID
    }
}
impl windows_core::RuntimeName for IOPCHDA_SyncRead {}
windows_core::imp::define_interface!(
    IOPCHDA_SyncUpdate,
    IOPCHDA_SyncUpdate_Vtbl,
    0x1f1217b3_dee0_11d2_a5e5_000086339399
);
windows_core::imp::interface_hierarchy!(IOPCHDA_SyncUpdate, windows_core::IUnknown);
impl IOPCHDA_SyncUpdate {
    pub unsafe fn QueryCapabilities(&self) -> windows_core::Result<tagOPCHDA_UPDATECAPABILITIES> {
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(self).QueryCapabilities)(
                windows_core::Interface::as_raw(self),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub unsafe fn Insert(
        &self,
        dwnumitems: u32,
        phserver: *const u32,
        fttimestamps: *const windows::Win32::Foundation::FILETIME,
        vdatavalues: *const windows::Win32::System::Variant::VARIANT,
        pdwqualities: *const u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).Insert)(
                windows_core::Interface::as_raw(self),
                dwnumitems,
                phserver,
                fttimestamps,
                core::mem::transmute(vdatavalues),
                pdwqualities,
                pperrors as _,
            )
            .ok()
        }
    }
    pub unsafe fn Replace(
        &self,
        dwnumitems: u32,
        phserver: *const u32,
        fttimestamps: *const windows::Win32::Foundation::FILETIME,
        vdatavalues: *const windows::Win32::System::Variant::VARIANT,
        pdwqualities: *const u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).Replace)(
                windows_core::Interface::as_raw(self),
                dwnumitems,
                phserver,
                fttimestamps,
                core::mem::transmute(vdatavalues),
                pdwqualities,
                pperrors as _,
            )
            .ok()
        }
    }
    pub unsafe fn InsertReplace(
        &self,
        dwnumitems: u32,
        phserver: *const u32,
        fttimestamps: *const windows::Win32::Foundation::FILETIME,
        vdatavalues: *const windows::Win32::System::Variant::VARIANT,
        pdwqualities: *const u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).InsertReplace)(
                windows_core::Interface::as_raw(self),
                dwnumitems,
                phserver,
                fttimestamps,
                core::mem::transmute(vdatavalues),
                pdwqualities,
                pperrors as _,
            )
            .ok()
        }
    }
    pub unsafe fn DeleteRaw(
        &self,
        htstarttime: *mut tagOPCHDA_TIME,
        htendtime: *mut tagOPCHDA_TIME,
        dwnumitems: u32,
        phserver: *const u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).DeleteRaw)(
                windows_core::Interface::as_raw(self),
                htstarttime as _,
                htendtime as _,
                dwnumitems,
                phserver,
                pperrors as _,
            )
            .ok()
        }
    }
    pub unsafe fn DeleteAtTime(
        &self,
        dwnumitems: u32,
        phserver: *const u32,
        fttimestamps: *const windows::Win32::Foundation::FILETIME,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()> {
        unsafe {
            (windows_core::Interface::vtable(self).DeleteAtTime)(
                windows_core::Interface::as_raw(self),
                dwnumitems,
                phserver,
                fttimestamps,
                pperrors as _,
            )
            .ok()
        }
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IOPCHDA_SyncUpdate_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub QueryCapabilities: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut tagOPCHDA_UPDATECAPABILITIES,
    ) -> windows_core::HRESULT,
    pub Insert: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *const u32,
        *const windows::Win32::Foundation::FILETIME,
        *const windows::Win32::System::Variant::VARIANT,
        *const u32,
        *mut *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub Replace: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *const u32,
        *const windows::Win32::Foundation::FILETIME,
        *const windows::Win32::System::Variant::VARIANT,
        *const u32,
        *mut *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub InsertReplace: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *const u32,
        *const windows::Win32::Foundation::FILETIME,
        *const windows::Win32::System::Variant::VARIANT,
        *const u32,
        *mut *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub DeleteRaw: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut tagOPCHDA_TIME,
        *mut tagOPCHDA_TIME,
        u32,
        *const u32,
        *mut *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
    pub DeleteAtTime: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *const u32,
        *const windows::Win32::Foundation::FILETIME,
        *mut *mut windows_core::HRESULT,
    ) -> windows_core::HRESULT,
}
pub trait IOPCHDA_SyncUpdate_Impl: windows_core::IUnknownImpl {
    fn QueryCapabilities(&self) -> windows_core::Result<tagOPCHDA_UPDATECAPABILITIES>;
    fn Insert(
        &self,
        dwnumitems: u32,
        phserver: *const u32,
        fttimestamps: *const windows::Win32::Foundation::FILETIME,
        vdatavalues: *const windows::Win32::System::Variant::VARIANT,
        pdwqualities: *const u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn Replace(
        &self,
        dwnumitems: u32,
        phserver: *const u32,
        fttimestamps: *const windows::Win32::Foundation::FILETIME,
        vdatavalues: *const windows::Win32::System::Variant::VARIANT,
        pdwqualities: *const u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn InsertReplace(
        &self,
        dwnumitems: u32,
        phserver: *const u32,
        fttimestamps: *const windows::Win32::Foundation::FILETIME,
        vdatavalues: *const windows::Win32::System::Variant::VARIANT,
        pdwqualities: *const u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn DeleteRaw(
        &self,
        htstarttime: *mut tagOPCHDA_TIME,
        htendtime: *mut tagOPCHDA_TIME,
        dwnumitems: u32,
        phserver: *const u32,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()>;
    fn DeleteAtTime(
        &self,
        dwnumitems: u32,
        phserver: *const u32,
        fttimestamps: *const windows::Win32::Foundation::FILETIME,
        pperrors: *mut *mut windows_core::HRESULT,
    ) -> windows_core::Result<()>;
}
impl IOPCHDA_SyncUpdate_Vtbl {
    pub const fn new<Identity: IOPCHDA_SyncUpdate_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn QueryCapabilities<
            Identity: IOPCHDA_SyncUpdate_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            pcapabilities: *mut tagOPCHDA_UPDATECAPABILITIES,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IOPCHDA_SyncUpdate_Impl::QueryCapabilities(this) {
                    Ok(ok__) => {
                        pcapabilities.write(core::mem::transmute(ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn Insert<Identity: IOPCHDA_SyncUpdate_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            dwnumitems: u32,
            phserver: *const u32,
            fttimestamps: *const windows::Win32::Foundation::FILETIME,
            vdatavalues: *const windows::Win32::System::Variant::VARIANT,
            pdwqualities: *const u32,
            pperrors: *mut *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_SyncUpdate_Impl::Insert(
                    this,
                    core::mem::transmute_copy(&dwnumitems),
                    core::mem::transmute_copy(&phserver),
                    core::mem::transmute_copy(&fttimestamps),
                    core::mem::transmute_copy(&vdatavalues),
                    core::mem::transmute_copy(&pdwqualities),
                    core::mem::transmute_copy(&pperrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn Replace<
            Identity: IOPCHDA_SyncUpdate_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwnumitems: u32,
            phserver: *const u32,
            fttimestamps: *const windows::Win32::Foundation::FILETIME,
            vdatavalues: *const windows::Win32::System::Variant::VARIANT,
            pdwqualities: *const u32,
            pperrors: *mut *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_SyncUpdate_Impl::Replace(
                    this,
                    core::mem::transmute_copy(&dwnumitems),
                    core::mem::transmute_copy(&phserver),
                    core::mem::transmute_copy(&fttimestamps),
                    core::mem::transmute_copy(&vdatavalues),
                    core::mem::transmute_copy(&pdwqualities),
                    core::mem::transmute_copy(&pperrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn InsertReplace<
            Identity: IOPCHDA_SyncUpdate_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwnumitems: u32,
            phserver: *const u32,
            fttimestamps: *const windows::Win32::Foundation::FILETIME,
            vdatavalues: *const windows::Win32::System::Variant::VARIANT,
            pdwqualities: *const u32,
            pperrors: *mut *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_SyncUpdate_Impl::InsertReplace(
                    this,
                    core::mem::transmute_copy(&dwnumitems),
                    core::mem::transmute_copy(&phserver),
                    core::mem::transmute_copy(&fttimestamps),
                    core::mem::transmute_copy(&vdatavalues),
                    core::mem::transmute_copy(&pdwqualities),
                    core::mem::transmute_copy(&pperrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn DeleteRaw<
            Identity: IOPCHDA_SyncUpdate_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            htstarttime: *mut tagOPCHDA_TIME,
            htendtime: *mut tagOPCHDA_TIME,
            dwnumitems: u32,
            phserver: *const u32,
            pperrors: *mut *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_SyncUpdate_Impl::DeleteRaw(
                    this,
                    core::mem::transmute_copy(&htstarttime),
                    core::mem::transmute_copy(&htendtime),
                    core::mem::transmute_copy(&dwnumitems),
                    core::mem::transmute_copy(&phserver),
                    core::mem::transmute_copy(&pperrors),
                )
                .into()
            }
        }
        unsafe extern "system" fn DeleteAtTime<
            Identity: IOPCHDA_SyncUpdate_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            dwnumitems: u32,
            phserver: *const u32,
            fttimestamps: *const windows::Win32::Foundation::FILETIME,
            pperrors: *mut *mut windows_core::HRESULT,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IOPCHDA_SyncUpdate_Impl::DeleteAtTime(
                    this,
                    core::mem::transmute_copy(&dwnumitems),
                    core::mem::transmute_copy(&phserver),
                    core::mem::transmute_copy(&fttimestamps),
                    core::mem::transmute_copy(&pperrors),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            QueryCapabilities: QueryCapabilities::<Identity, OFFSET>,
            Insert: Insert::<Identity, OFFSET>,
            Replace: Replace::<Identity, OFFSET>,
            InsertReplace: InsertReplace::<Identity, OFFSET>,
            DeleteRaw: DeleteRaw::<Identity, OFFSET>,
            DeleteAtTime: DeleteAtTime::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IOPCHDA_SyncUpdate as windows_core::Interface>::IID
    }
}
impl windows_core::RuntimeName for IOPCHDA_SyncUpdate {}
pub const OPCHDA_AGGRNAME_ANNOTATIONS: windows_core::PCWSTR = windows_core::w!("Annotations");
pub const OPCHDA_AGGRNAME_AVERAGE: windows_core::PCWSTR = windows_core::w!("Average");
pub const OPCHDA_AGGRNAME_COUNT: windows_core::PCWSTR = windows_core::w!("Count");
pub const OPCHDA_AGGRNAME_DELTA: windows_core::PCWSTR = windows_core::w!("Delta");
pub const OPCHDA_AGGRNAME_DURATIONBAD: windows_core::PCWSTR = windows_core::w!("Duration Bad");
pub const OPCHDA_AGGRNAME_DURATIONGOOD: windows_core::PCWSTR = windows_core::w!("Duration Good");
pub const OPCHDA_AGGRNAME_END: windows_core::PCWSTR = windows_core::w!("End");
pub const OPCHDA_AGGRNAME_INTERPOLATIVE: windows_core::PCWSTR = windows_core::w!("Interpolative");
pub const OPCHDA_AGGRNAME_MAXIMUM: windows_core::PCWSTR = windows_core::w!("Maximum");
pub const OPCHDA_AGGRNAME_MAXIMUMACTUALTIME: windows_core::PCWSTR =
    windows_core::w!("Maximum Actual Time");
pub const OPCHDA_AGGRNAME_MINIMUM: windows_core::PCWSTR = windows_core::w!("Minimum");
pub const OPCHDA_AGGRNAME_MINIMUMACTUALTIME: windows_core::PCWSTR =
    windows_core::w!("Minimum Actual Time");
pub const OPCHDA_AGGRNAME_PERCENTBAD: windows_core::PCWSTR = windows_core::w!("Percent Bad");
pub const OPCHDA_AGGRNAME_PERCENTGOOD: windows_core::PCWSTR = windows_core::w!("Percent Good");
pub const OPCHDA_AGGRNAME_RANGE: windows_core::PCWSTR = windows_core::w!("Range");
pub const OPCHDA_AGGRNAME_REGCONST: windows_core::PCWSTR =
    windows_core::w!("Regression Line Constant");
pub const OPCHDA_AGGRNAME_REGDEV: windows_core::PCWSTR = windows_core::w!("Regression Line Error");
pub const OPCHDA_AGGRNAME_REGSLOPE: windows_core::PCWSTR =
    windows_core::w!("Regression Line Slope");
pub const OPCHDA_AGGRNAME_START: windows_core::PCWSTR = windows_core::w!("Start");
pub const OPCHDA_AGGRNAME_STDEV: windows_core::PCWSTR = windows_core::w!("Standard Deviation");
pub const OPCHDA_AGGRNAME_TIMEAVERAGE: windows_core::PCWSTR = windows_core::w!("Time Average");
pub const OPCHDA_AGGRNAME_TOTAL: windows_core::PCWSTR = windows_core::w!("Total");
pub const OPCHDA_AGGRNAME_VARIANCE: windows_core::PCWSTR = windows_core::w!("Variance");
pub const OPCHDA_AGGRNAME_WORSTQUALITY: windows_core::PCWSTR = windows_core::w!("Worst Quality");
pub const OPCHDA_ANNOTATIONS: tagOPCHDA_AGGREGATE = tagOPCHDA_AGGREGATE(24i32);
pub const OPCHDA_ARCHIVING: u32 = 5u32;
pub const OPCHDA_ATTRNAME_ARCHIVING: windows_core::PCWSTR = windows_core::w!("Archiving");
pub const OPCHDA_ATTRNAME_DATA_TYPE: windows_core::PCWSTR = windows_core::w!("Data Type");
pub const OPCHDA_ATTRNAME_DERIVE_EQUATION: windows_core::PCWSTR =
    windows_core::w!("Derive Equation");
pub const OPCHDA_ATTRNAME_DESCRIPTION: windows_core::PCWSTR = windows_core::w!("Description");
pub const OPCHDA_ATTRNAME_ENG_UNITS: windows_core::PCWSTR = windows_core::w!("Eng Units");
pub const OPCHDA_ATTRNAME_EXCEPTION_DEV: windows_core::PCWSTR =
    windows_core::w!("Exception Deviation");
pub const OPCHDA_ATTRNAME_EXCEPTION_DEV_TYPE: windows_core::PCWSTR =
    windows_core::w!("Exception Dev Type");
pub const OPCHDA_ATTRNAME_HIGH_ENTRY_LIMIT: windows_core::PCWSTR =
    windows_core::w!("High Entry Limit");
pub const OPCHDA_ATTRNAME_ITEMID: windows_core::PCWSTR = windows_core::w!("ItemID");
pub const OPCHDA_ATTRNAME_LOW_ENTRY_LIMIT: windows_core::PCWSTR =
    windows_core::w!("Low Entry Limit");
pub const OPCHDA_ATTRNAME_MAX_TIME_INT: windows_core::PCWSTR =
    windows_core::w!("Max Time Interval");
pub const OPCHDA_ATTRNAME_MIN_TIME_INT: windows_core::PCWSTR =
    windows_core::w!("Min Time Interval");
pub const OPCHDA_ATTRNAME_NODE_NAME: windows_core::PCWSTR = windows_core::w!("Node Name");
pub const OPCHDA_ATTRNAME_NORMAL_MAXIMUM: windows_core::PCWSTR = windows_core::w!("Normal Maximum");
pub const OPCHDA_ATTRNAME_NORMAL_MINIMUM: windows_core::PCWSTR = windows_core::w!("Normal Minimum");
pub const OPCHDA_ATTRNAME_PROCESS_NAME: windows_core::PCWSTR = windows_core::w!("Process Name");
pub const OPCHDA_ATTRNAME_SOURCE_NAME: windows_core::PCWSTR = windows_core::w!("Source Name");
pub const OPCHDA_ATTRNAME_SOURCE_TYPE: windows_core::PCWSTR = windows_core::w!("Source Type");
pub const OPCHDA_ATTRNAME_STEPPED: windows_core::PCWSTR = windows_core::w!("Stepped");
pub const OPCHDA_AVERAGE: tagOPCHDA_AGGREGATE = tagOPCHDA_AGGREGATE(3i32);
pub const OPCHDA_BRANCH: tagOPCHDA_BROWSETYPE = tagOPCHDA_BROWSETYPE(1i32);
pub const OPCHDA_BROWSE_DIRECT: tagOPCHDA_BROWSEDIRECTION = tagOPCHDA_BROWSEDIRECTION(3i32);
pub const OPCHDA_BROWSE_DOWN: tagOPCHDA_BROWSEDIRECTION = tagOPCHDA_BROWSEDIRECTION(2i32);
pub const OPCHDA_BROWSE_UP: tagOPCHDA_BROWSEDIRECTION = tagOPCHDA_BROWSEDIRECTION(1i32);
pub const OPCHDA_CALCULATED: u32 = 524288u32;
pub const OPCHDA_CONVERSION: u32 = 8388608u32;
pub const OPCHDA_COUNT: tagOPCHDA_AGGREGATE = tagOPCHDA_AGGREGATE(5i32);
pub const OPCHDA_DATALOST: u32 = 4194304u32;
pub const OPCHDA_DATA_TYPE: u32 = 1u32;
pub const OPCHDA_DELETE: tagOPCHDA_EDITTYPE = tagOPCHDA_EDITTYPE(4i32);
pub const OPCHDA_DELETEATTIMECAP: tagOPCHDA_UPDATECAPABILITIES =
    tagOPCHDA_UPDATECAPABILITIES(16i32);
pub const OPCHDA_DELETERAWCAP: tagOPCHDA_UPDATECAPABILITIES = tagOPCHDA_UPDATECAPABILITIES(8i32);
pub const OPCHDA_DELTA: tagOPCHDA_AGGREGATE = tagOPCHDA_AGGREGATE(13i32);
pub const OPCHDA_DERIVE_EQUATION: u32 = 6u32;
pub const OPCHDA_DESCRIPTION: u32 = 2u32;
pub const OPCHDA_DOWN: tagOPCHDA_SERVERSTATUS = tagOPCHDA_SERVERSTATUS(2i32);
pub const OPCHDA_DURATIONBAD: tagOPCHDA_AGGREGATE = tagOPCHDA_AGGREGATE(20i32);
pub const OPCHDA_DURATIONGOOD: tagOPCHDA_AGGREGATE = tagOPCHDA_AGGREGATE(19i32);
pub const OPCHDA_END: tagOPCHDA_AGGREGATE = tagOPCHDA_AGGREGATE(12i32);
pub const OPCHDA_ENG_UNITS: u32 = 3u32;
pub const OPCHDA_EQUAL: tagOPCHDA_OPERATORCODES = tagOPCHDA_OPERATORCODES(1i32);
pub const OPCHDA_EXCEPTION_DEV: u32 = 16u32;
pub const OPCHDA_EXCEPTION_DEV_TYPE: u32 = 17u32;
pub const OPCHDA_EXTRADATA: u32 = 65536u32;
pub const OPCHDA_FLAT: tagOPCHDA_BROWSETYPE = tagOPCHDA_BROWSETYPE(3i32);
pub const OPCHDA_GREATER: tagOPCHDA_OPERATORCODES = tagOPCHDA_OPERATORCODES(4i32);
pub const OPCHDA_GREATEREQUAL: tagOPCHDA_OPERATORCODES = tagOPCHDA_OPERATORCODES(5i32);
pub const OPCHDA_HIGH_ENTRY_LIMIT: u32 = 18u32;
pub const OPCHDA_INDETERMINATE: tagOPCHDA_SERVERSTATUS = tagOPCHDA_SERVERSTATUS(3i32);
pub const OPCHDA_INSERT: tagOPCHDA_EDITTYPE = tagOPCHDA_EDITTYPE(1i32);
pub const OPCHDA_INSERTANNOTATIONCAP: tagOPCHDA_ANNOTATIONCAPABILITIES =
    tagOPCHDA_ANNOTATIONCAPABILITIES(2i32);
pub const OPCHDA_INSERTCAP: tagOPCHDA_UPDATECAPABILITIES = tagOPCHDA_UPDATECAPABILITIES(1i32);
pub const OPCHDA_INSERTREPLACE: tagOPCHDA_EDITTYPE = tagOPCHDA_EDITTYPE(3i32);
pub const OPCHDA_INSERTREPLACECAP: tagOPCHDA_UPDATECAPABILITIES =
    tagOPCHDA_UPDATECAPABILITIES(4i32);
pub const OPCHDA_INTERPOLATED: u32 = 131072u32;
pub const OPCHDA_INTERPOLATIVE: tagOPCHDA_AGGREGATE = tagOPCHDA_AGGREGATE(1i32);
pub const OPCHDA_ITEMID: u32 = 13u32;
pub const OPCHDA_ITEMS: tagOPCHDA_BROWSETYPE = tagOPCHDA_BROWSETYPE(4i32);
pub const OPCHDA_LEAF: tagOPCHDA_BROWSETYPE = tagOPCHDA_BROWSETYPE(2i32);
pub const OPCHDA_LESS: tagOPCHDA_OPERATORCODES = tagOPCHDA_OPERATORCODES(2i32);
pub const OPCHDA_LESSEQUAL: tagOPCHDA_OPERATORCODES = tagOPCHDA_OPERATORCODES(3i32);
pub const OPCHDA_LOW_ENTRY_LIMIT: u32 = 19u32;
pub const OPCHDA_MAXIMUM: tagOPCHDA_AGGREGATE = tagOPCHDA_AGGREGATE(10i32);
pub const OPCHDA_MAXIMUMACTUALTIME: tagOPCHDA_AGGREGATE = tagOPCHDA_AGGREGATE(9i32);
pub const OPCHDA_MAX_TIME_INT: u32 = 14u32;
pub const OPCHDA_MINIMUM: tagOPCHDA_AGGREGATE = tagOPCHDA_AGGREGATE(8i32);
pub const OPCHDA_MINIMUMACTUALTIME: tagOPCHDA_AGGREGATE = tagOPCHDA_AGGREGATE(7i32);
pub const OPCHDA_MIN_TIME_INT: u32 = 15u32;
pub const OPCHDA_NOAGGREGATE: tagOPCHDA_AGGREGATE = tagOPCHDA_AGGREGATE(0i32);
pub const OPCHDA_NOBOUND: u32 = 1048576u32;
pub const OPCHDA_NODATA: u32 = 2097152u32;
pub const OPCHDA_NODE_NAME: u32 = 7u32;
pub const OPCHDA_NORMAL_MAXIMUM: u32 = 11u32;
pub const OPCHDA_NORMAL_MINIMUM: u32 = 12u32;
pub const OPCHDA_NOTEQUAL: tagOPCHDA_OPERATORCODES = tagOPCHDA_OPERATORCODES(6i32);
pub const OPCHDA_PARTIAL: u32 = 16777216u32;
pub const OPCHDA_PERCENTBAD: tagOPCHDA_AGGREGATE = tagOPCHDA_AGGREGATE(22i32);
pub const OPCHDA_PERCENTGOOD: tagOPCHDA_AGGREGATE = tagOPCHDA_AGGREGATE(21i32);
pub const OPCHDA_PROCESS_NAME: u32 = 8u32;
pub const OPCHDA_RANGE: tagOPCHDA_AGGREGATE = tagOPCHDA_AGGREGATE(18i32);
pub const OPCHDA_RAW: u32 = 262144u32;
pub const OPCHDA_READANNOTATIONCAP: tagOPCHDA_ANNOTATIONCAPABILITIES =
    tagOPCHDA_ANNOTATIONCAPABILITIES(1i32);
pub const OPCHDA_REGCONST: tagOPCHDA_AGGREGATE = tagOPCHDA_AGGREGATE(15i32);
pub const OPCHDA_REGDEV: tagOPCHDA_AGGREGATE = tagOPCHDA_AGGREGATE(16i32);
pub const OPCHDA_REGSLOPE: tagOPCHDA_AGGREGATE = tagOPCHDA_AGGREGATE(14i32);
pub const OPCHDA_REPLACE: tagOPCHDA_EDITTYPE = tagOPCHDA_EDITTYPE(2i32);
pub const OPCHDA_REPLACECAP: tagOPCHDA_UPDATECAPABILITIES = tagOPCHDA_UPDATECAPABILITIES(2i32);
pub const OPCHDA_SOURCE_NAME: u32 = 9u32;
pub const OPCHDA_SOURCE_TYPE: u32 = 10u32;
pub const OPCHDA_START: tagOPCHDA_AGGREGATE = tagOPCHDA_AGGREGATE(11i32);
pub const OPCHDA_STDEV: tagOPCHDA_AGGREGATE = tagOPCHDA_AGGREGATE(6i32);
pub const OPCHDA_STEPPED: u32 = 4u32;
pub const OPCHDA_TIMEAVERAGE: tagOPCHDA_AGGREGATE = tagOPCHDA_AGGREGATE(4i32);
pub const OPCHDA_TOTAL: tagOPCHDA_AGGREGATE = tagOPCHDA_AGGREGATE(2i32);
pub const OPCHDA_UP: tagOPCHDA_SERVERSTATUS = tagOPCHDA_SERVERSTATUS(1i32);
pub const OPCHDA_VARIANCE: tagOPCHDA_AGGREGATE = tagOPCHDA_AGGREGATE(17i32);
pub const OPCHDA_WORSTQUALITY: tagOPCHDA_AGGREGATE = tagOPCHDA_AGGREGATE(23i32);
pub const OPC_CATEGORY_DESCRIPTION_HDA10: windows_core::PCWSTR =
    windows_core::w!("OPC History Data Access Servers Version 1.0");
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct tagOPCHDA_AGGREGATE(pub i32);
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct tagOPCHDA_ANNOTATION {
    pub hClient: u32,
    pub dwNumValues: u32,
    pub ftTimeStamps: *mut windows::Win32::Foundation::FILETIME,
    pub szAnnotation: *mut windows_core::PWSTR,
    pub ftAnnotationTime: *mut windows::Win32::Foundation::FILETIME,
    pub szUser: *mut windows_core::PWSTR,
}
impl Default for tagOPCHDA_ANNOTATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct tagOPCHDA_ANNOTATIONCAPABILITIES(pub i32);
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct tagOPCHDA_ATTRIBUTE {
    pub hClient: u32,
    pub dwNumValues: u32,
    pub dwAttributeID: u32,
    pub ftTimeStamps: *mut windows::Win32::Foundation::FILETIME,
    pub vAttributeValues: *mut windows::Win32::System::Variant::VARIANT,
}
impl Default for tagOPCHDA_ATTRIBUTE {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct tagOPCHDA_BROWSEDIRECTION(pub i32);
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct tagOPCHDA_BROWSETYPE(pub i32);
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct tagOPCHDA_EDITTYPE(pub i32);
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct tagOPCHDA_ITEM {
    pub hClient: u32,
    pub haAggregate: u32,
    pub dwCount: u32,
    pub pftTimeStamps: *mut windows::Win32::Foundation::FILETIME,
    pub pdwQualities: *mut u32,
    pub pvDataValues: *mut windows::Win32::System::Variant::VARIANT,
}
impl Default for tagOPCHDA_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct tagOPCHDA_MODIFIEDITEM {
    pub hClient: u32,
    pub dwCount: u32,
    pub pftTimeStamps: *mut windows::Win32::Foundation::FILETIME,
    pub pdwQualities: *mut u32,
    pub pvDataValues: *mut windows::Win32::System::Variant::VARIANT,
    pub pftModificationTime: *mut windows::Win32::Foundation::FILETIME,
    pub pEditType: *mut tagOPCHDA_EDITTYPE,
    pub szUser: *mut windows_core::PWSTR,
}
impl Default for tagOPCHDA_MODIFIEDITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct tagOPCHDA_OPERATORCODES(pub i32);
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct tagOPCHDA_SERVERSTATUS(pub i32);
#[repr(C)]
#[derive(Clone, Copy, Debug, Default, PartialEq)]
pub struct tagOPCHDA_TIME {
    pub bString: windows_core::BOOL,
    pub szTime: windows_core::PWSTR,
    pub ftTime: windows::Win32::Foundation::FILETIME,
}
#[repr(transparent)]
#[derive(Clone, Copy, Debug, Default, Eq, PartialEq)]
pub struct tagOPCHDA_UPDATECAPABILITIES(pub i32);
